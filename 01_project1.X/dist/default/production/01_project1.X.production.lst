

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Mon Mar 17 11:33:01 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,space=0,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    12                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 12/10/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0004                     fsr             equ	4
    53     0004                     fsr0            equ	4
    54     0000                     indf            equ	0
    55     0000                     indf0           equ	0
    56     0002                     pc              equ	2
    57     0002                     pcl             equ	2
    58     000A                     pclath          equ	10
    59     0003                     status          equ	3
    60     0000                     INDF            equ	0	;# 
    61     0001                     TMR0            equ	1	;# 
    62     0002                     PCL             equ	2	;# 
    63     0003                     STATUS          equ	3	;# 
    64     0004                     FSR             equ	4	;# 
    65     0005                     PORTA           equ	5	;# 
    66     0006                     PORTB           equ	6	;# 
    67     0007                     PORTC           equ	7	;# 
    68     0008                     PORTD           equ	8	;# 
    69     0009                     PORTE           equ	9	;# 
    70     000A                     PCLATH          equ	10	;# 
    71     000B                     INTCON          equ	11	;# 
    72     000C                     PIR1            equ	12	;# 
    73     000D                     PIR2            equ	13	;# 
    74     000E                     TMR1            equ	14	;# 
    75     000E                     TMR1L           equ	14	;# 
    76     000F                     TMR1H           equ	15	;# 
    77     0010                     T1CON           equ	16	;# 
    78     0011                     TMR2            equ	17	;# 
    79     0012                     T2CON           equ	18	;# 
    80     0013                     SSPBUF          equ	19	;# 
    81     0014                     SSPCON          equ	20	;# 
    82     0015                     CCPR1           equ	21	;# 
    83     0015                     CCPR1L          equ	21	;# 
    84     0016                     CCPR1H          equ	22	;# 
    85     0017                     CCP1CON         equ	23	;# 
    86     0018                     RCSTA           equ	24	;# 
    87     0019                     TXREG           equ	25	;# 
    88     001A                     RCREG           equ	26	;# 
    89     001B                     CCPR2           equ	27	;# 
    90     001B                     CCPR2L          equ	27	;# 
    91     001C                     CCPR2H          equ	28	;# 
    92     001D                     CCP2CON         equ	29	;# 
    93     001E                     ADRESH          equ	30	;# 
    94     001F                     ADCON0          equ	31	;# 
    95     0081                     OPTION_REG      equ	129	;# 
    96     0085                     TRISA           equ	133	;# 
    97     0086                     TRISB           equ	134	;# 
    98     0087                     TRISC           equ	135	;# 
    99     0088                     TRISD           equ	136	;# 
   100     0089                     TRISE           equ	137	;# 
   101     008C                     PIE1            equ	140	;# 
   102     008D                     PIE2            equ	141	;# 
   103     008E                     PCON            equ	142	;# 
   104     0091                     SSPCON2         equ	145	;# 
   105     0092                     PR2             equ	146	;# 
   106     0093                     SSPADD          equ	147	;# 
   107     0094                     SSPSTAT         equ	148	;# 
   108     0098                     TXSTA           equ	152	;# 
   109     0099                     SPBRG           equ	153	;# 
   110     009C                     CMCON           equ	156	;# 
   111     009D                     CVRCON          equ	157	;# 
   112     009E                     ADRESL          equ	158	;# 
   113     009F                     ADCON1          equ	159	;# 
   114     010C                     EEDATA          equ	268	;# 
   115     010D                     EEADR           equ	269	;# 
   116     010E                     EEDATH          equ	270	;# 
   117     010F                     EEADRH          equ	271	;# 
   118     018C                     EECON1          equ	396	;# 
   119     018D                     EECON2          equ	397	;# 
   120     0000                     INDF            equ	0	;# 
   121     0001                     TMR0            equ	1	;# 
   122     0002                     PCL             equ	2	;# 
   123     0003                     STATUS          equ	3	;# 
   124     0004                     FSR             equ	4	;# 
   125     0005                     PORTA           equ	5	;# 
   126     0006                     PORTB           equ	6	;# 
   127     0007                     PORTC           equ	7	;# 
   128     0008                     PORTD           equ	8	;# 
   129     0009                     PORTE           equ	9	;# 
   130     000A                     PCLATH          equ	10	;# 
   131     000B                     INTCON          equ	11	;# 
   132     000C                     PIR1            equ	12	;# 
   133     000D                     PIR2            equ	13	;# 
   134     000E                     TMR1            equ	14	;# 
   135     000E                     TMR1L           equ	14	;# 
   136     000F                     TMR1H           equ	15	;# 
   137     0010                     T1CON           equ	16	;# 
   138     0011                     TMR2            equ	17	;# 
   139     0012                     T2CON           equ	18	;# 
   140     0013                     SSPBUF          equ	19	;# 
   141     0014                     SSPCON          equ	20	;# 
   142     0015                     CCPR1           equ	21	;# 
   143     0015                     CCPR1L          equ	21	;# 
   144     0016                     CCPR1H          equ	22	;# 
   145     0017                     CCP1CON         equ	23	;# 
   146     0018                     RCSTA           equ	24	;# 
   147     0019                     TXREG           equ	25	;# 
   148     001A                     RCREG           equ	26	;# 
   149     001B                     CCPR2           equ	27	;# 
   150     001B                     CCPR2L          equ	27	;# 
   151     001C                     CCPR2H          equ	28	;# 
   152     001D                     CCP2CON         equ	29	;# 
   153     001E                     ADRESH          equ	30	;# 
   154     001F                     ADCON0          equ	31	;# 
   155     0081                     OPTION_REG      equ	129	;# 
   156     0085                     TRISA           equ	133	;# 
   157     0086                     TRISB           equ	134	;# 
   158     0087                     TRISC           equ	135	;# 
   159     0088                     TRISD           equ	136	;# 
   160     0089                     TRISE           equ	137	;# 
   161     008C                     PIE1            equ	140	;# 
   162     008D                     PIE2            equ	141	;# 
   163     008E                     PCON            equ	142	;# 
   164     0091                     SSPCON2         equ	145	;# 
   165     0092                     PR2             equ	146	;# 
   166     0093                     SSPADD          equ	147	;# 
   167     0094                     SSPSTAT         equ	148	;# 
   168     0098                     TXSTA           equ	152	;# 
   169     0099                     SPBRG           equ	153	;# 
   170     009C                     CMCON           equ	156	;# 
   171     009D                     CVRCON          equ	157	;# 
   172     009E                     ADRESL          equ	158	;# 
   173     009F                     ADCON1          equ	159	;# 
   174     010C                     EEDATA          equ	268	;# 
   175     010D                     EEADR           equ	269	;# 
   176     010E                     EEDATH          equ	270	;# 
   177     010F                     EEADRH          equ	271	;# 
   178     018C                     EECON1          equ	396	;# 
   179     018D                     EECON2          equ	397	;# 
   180                           
   181                           	psect	idataCOMMON
   182     06C1                     __pidataCOMMON:
   183                           
   184                           ;initializer for _array
   185     06C1  3442               	retlw	66
   186     06C2  3448               	retlw	72
   187     06C3  3441               	retlw	65
   188     06C4  3456               	retlw	86
   189     06C5  3441               	retlw	65
   190     06C6  344E               	retlw	78
   191     06C7  3441               	retlw	65
   192                           
   193                           	psect	idataBANK0
   194     0701                     __pidataBANK0:
   195                           
   196                           ;initializer for _lower
   197     0701  34CF               	retlw	207
   198     0702  34CE               	retlw	206
   199     0703  34CD               	retlw	205
   200     0704  34CC               	retlw	204
   201     0705  34CB               	retlw	203
   202     0706  34CA               	retlw	202
   203     0707  34C9               	retlw	201
   204     0708  34C8               	retlw	200
   205     0709  34C7               	retlw	199
   206     070A  34C6               	retlw	198
   207     070B  34C5               	retlw	197
   208     070C  34C4               	retlw	196
   209     070D  34C3               	retlw	195
   210     070E  34C2               	retlw	194
   211     070F  34C1               	retlw	193
   212     0710  34C0               	retlw	192
   213                           
   214                           ;initializer for _upper
   215     0711  3480               	retlw	128
   216     0712  3481               	retlw	129
   217     0713  3482               	retlw	130
   218     0714  3483               	retlw	131
   219     0715  3484               	retlw	132
   220     0716  3485               	retlw	133
   221     0717  3486               	retlw	134
   222     0718  3487               	retlw	135
   223     0719  3488               	retlw	136
   224     071A  3489               	retlw	137
   225     071B  348A               	retlw	138
   226     071C  348B               	retlw	139
   227     071D  348C               	retlw	140
   228     071E  348D               	retlw	141
   229     071F  348E               	retlw	142
   230     0720  348F               	retlw	143
   231     0008                     _PORTD          set	8
   232     0038                     _RC0            set	56
   233     003B                     _RC3            set	59
   234     0088                     _TRISD          set	136
   235     0087                     _TRISC          set	135
   236                           
   237                           	psect	cinit
   238     07C4                     start_initialization:	
   239                           ; #config settings
   240                           
   241     07C4                     __initialization:
   242                           
   243                           ; Initialize objects allocated to BANK0
   244     07C4  1383               	bcf	3,7	;select IRP bank0
   245     07C5  3040               	movlw	low (__pdataBANK0+32)
   246     07C6  00FD               	movwf	btemp+-1
   247     07C7  3007               	movlw	high __pidataBANK0
   248     07C8  00FE               	movwf	btemp
   249     07C9  3001               	movlw	low __pidataBANK0
   250     07CA  00FF               	movwf	btemp+1
   251     07CB  3020               	movlw	low __pdataBANK0
   252     07CC  0084               	movwf	4
   253     07CD  120A  118A  26F2  120A  118A  	fcall	init_ram0
   254                           
   255                           ; Initialize objects allocated to COMMON
   256     07D2  120A  118A  26C1  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   257     07D7  00F0               	movwf	__pdataCOMMON& (0+127)
   258     07D8  120A  118A  26C2  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   259     07DD  00F1               	movwf	(__pdataCOMMON+1)& (0+127)
   260     07DE  120A  118A  26C3  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
   261     07E3  00F2               	movwf	(__pdataCOMMON+2)& (0+127)
   262     07E4  120A  118A  26C4  120A  118A  	fcall	__pidataCOMMON+3	;fetch initializer
   263     07E9  00F3               	movwf	(__pdataCOMMON+3)& (0+127)
   264     07EA  120A  118A  26C5  120A  118A  	fcall	__pidataCOMMON+4	;fetch initializer
   265     07EF  00F4               	movwf	(__pdataCOMMON+4)& (0+127)
   266     07F0  120A  118A  26C6  120A  118A  	fcall	__pidataCOMMON+5	;fetch initializer
   267     07F5  00F5               	movwf	(__pdataCOMMON+5)& (0+127)
   268     07F6  120A  118A  26C7  120A  118A  	fcall	__pidataCOMMON+6	;fetch initializer
   269     07FB  00F6               	movwf	(__pdataCOMMON+6)& (0+127)
   270     07FC                     end_of_initialization:	
   271                           ;End of C runtime variable initialization code
   272                           
   273     07FC                     __end_of__initialization:
   274     07FC  0183               	clrf	3
   275     07FD  120A  118A  2F21   	ljmp	_main	;jump to C main() function
   276                           
   277                           	psect	dataCOMMON
   278     0070                     __pdataCOMMON:
   279     0070                     _array:
   280     0070                     	ds	7
   281                           
   282                           	psect	dataBANK0
   283     0020                     __pdataBANK0:
   284     0020                     _lower:
   285     0020                     	ds	16
   286     0030                     _upper:
   287     0030                     	ds	16
   288                           
   289                           	psect	inittext
   290     06EE                     init_fetch0:	
   291                           ;	Called with low address in FSR and high address in W
   292                           
   293     06EE  087E               	movf	btemp,w
   294     06EF  008A               	movwf	10
   295     06F0  087F               	movf	btemp+1,w
   296     06F1  0082               	movwf	2
   297     06F2                     init_ram0:	
   298                           ;Called with:
   299                           ;	high address of idata address in btemp 
   300                           ;	low address of idata address in btemp+1 
   301                           ;	low address of data in FSR
   302                           ;	high address + 1 of data in btemp-1
   303                           
   304     06F2  120A  118A  26EE  120A  118A  	fcall	init_fetch0
   305     06F7  0080               	movwf	0
   306     06F8  0A84               	incf	4,f
   307     06F9  0804               	movf	4,w
   308     06FA  067D               	xorwf	btemp+-1,w
   309     06FB  1903               	btfsc	3,2
   310     06FC  3400               	retlw	0
   311     06FD  0AFF               	incf	btemp+1,f
   312     06FE  1903               	btfsc	3,2
   313     06FF  0AFE               	incf	btemp,f
   314     0700  2EF2               	goto	init_ram0
   315                           
   316                           	psect	cstackCOMMON
   317     0077                     __pcstackCOMMON:
   318     0077                     ?_init:
   319     0077                     ?_Lcd_command:	
   320                           ; 1 bytes @ 0x0
   321                           
   322     0077                     ?_Lcd_data:	
   323                           ; 1 bytes @ 0x0
   324                           
   325     0077                     ?_main:	
   326                           ; 1 bytes @ 0x0
   327                           
   328     0077                     ??_Lcd_command:	
   329                           ; 1 bytes @ 0x0
   330                           
   331     0077                     ??_Lcd_data:	
   332                           ; 1 bytes @ 0x0
   333                           
   334                           
   335                           ; 1 bytes @ 0x0
   336     0077                     	ds	2
   337     0079                     Lcd_data@i:
   338     0079                     Lcd_command@i:	
   339                           ; 1 bytes @ 0x2
   340                           
   341                           
   342                           ; 1 bytes @ 0x2
   343     0079                     	ds	1
   344     007A                     ??_init:
   345                           
   346                           ; 1 bytes @ 0x3
   347     007A                     	ds	2
   348     007C                     ??_main:
   349                           
   350                           ; 1 bytes @ 0x5
   351     007C                     	ds	1
   352     007D                     main@i:
   353                           
   354                           ; 1 bytes @ 0x6
   355     007D                     	ds	1
   356                           
   357                           	psect	maintext
   358     0721                     __pmaintext:	
   359 ;;
   360 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   361 ;;
   362 ;; *************** function _main *****************
   363 ;; Defined at:
   364 ;;		line 31 in file "main.c"
   365 ;; Parameters:    Size  Location     Type
   366 ;;		None
   367 ;; Auto vars:     Size  Location     Type
   368 ;;  i               1    6[COMMON] unsigned char 
   369 ;; Return value:  Size  Location     Type
   370 ;;                  1    wreg      void 
   371 ;; Registers used:
   372 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   373 ;; Tracked objects:
   374 ;;		On entry : B00/0
   375 ;;		On exit  : 0/0
   376 ;;		Unchanged: 0/0
   377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   378 ;;      Params:         0       0       0       0       0
   379 ;;      Locals:         1       0       0       0       0
   380 ;;      Temps:          1       0       0       0       0
   381 ;;      Totals:         2       0       0       0       0
   382 ;;Total ram usage:        2 bytes
   383 ;; Hardware stack levels required when called: 2
   384 ;; This function calls:
   385 ;;		_Lcd_command
   386 ;;		_Lcd_data
   387 ;;		_init
   388 ;; This function is called by:
   389 ;;		Startup code after reset
   390 ;; This function uses a non-reentrant model
   391 ;;
   392                           
   393     0721                     _main:	
   394                           ;psect for function _main
   395                           
   396     0721                     l631:	
   397                           ;incstack = 0
   398                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   399                           
   400                           
   401                           ;main.c: 33:     unsigned char i;;main.c: 35:     init();
   402     0721  120A  118A  2765  120A  118A  	fcall	_init
   403     0726                     l633:
   404                           
   405                           ;main.c: 38:     for (i = 0; i < 7; i++)
   406     0726  01FD               	clrf	main@i
   407     0727                     l639:
   408                           
   409                           ;main.c: 39:     {;main.c: 40:         Lcd_command(upper[2 + i]);
   410     0727  087D               	movf	main@i,w
   411     0728  3E32               	addlw	(low ((_upper| 0+2)))& (0+255)
   412     0729  0084               	movwf	4
   413     072A  1383               	bcf	3,7	;select IRP bank0
   414     072B  0800               	movf	0,w
   415     072C  120A  118A  26DB  120A  118A  	fcall	_Lcd_command
   416                           
   417                           ;main.c: 41:         Lcd_data(array[i]);
   418     0731  087D               	movf	main@i,w
   419     0732  3E70               	addlw	(low (_array| 0))& (0+255)
   420     0733  0084               	movwf	4
   421     0734  0800               	movf	0,w
   422     0735  120A  118A  26C8  120A  118A  	fcall	_Lcd_data
   423     073A                     l641:
   424                           
   425                           ;main.c: 42:     }
   426     073A  3001               	movlw	1
   427     073B  07FD               	addwf	main@i,f
   428     073C                     l643:
   429     073C  3007               	movlw	7
   430     073D  027D               	subwf	main@i,w
   431     073E  1C03               	skipc
   432     073F  2F41               	goto	u11
   433     0740  2F42               	goto	u10
   434     0741                     u11:
   435     0741  2F27               	goto	l639
   436     0742                     u10:
   437     0742                     l645:
   438                           
   439                           ;main.c: 45:     for (i = 0; i < 7; i++)
   440     0742  01FD               	clrf	main@i
   441     0743                     l651:
   442                           
   443                           ;main.c: 46:     {;main.c: 47:         Lcd_command(lower[2 + i]);
   444     0743  087D               	movf	main@i,w
   445     0744  3E22               	addlw	(low ((_lower| 0+2)))& (0+255)
   446     0745  0084               	movwf	4
   447     0746  1383               	bcf	3,7	;select IRP bank0
   448     0747  0800               	movf	0,w
   449     0748  120A  118A  26DB  120A  118A  	fcall	_Lcd_command
   450                           
   451                           ;main.c: 48:         Lcd_data(array[6 - i]);
   452     074D  3076               	movlw	(low ((_array| 0+6)))& (0+255)
   453     074E  00FC               	movwf	??_main
   454     074F  087D               	movf	main@i,w
   455     0750  02FC               	subwf	??_main,f
   456     0751  087C               	movf	??_main,w
   457     0752  0084               	movwf	4
   458     0753  0800               	movf	0,w
   459     0754  120A  118A  26C8  120A  118A  	fcall	_Lcd_data
   460     0759                     l653:
   461                           
   462                           ;main.c: 49:     }
   463     0759  3001               	movlw	1
   464     075A  07FD               	addwf	main@i,f
   465     075B                     l655:
   466     075B  3007               	movlw	7
   467     075C  027D               	subwf	main@i,w
   468     075D  1C03               	skipc
   469     075E  2F60               	goto	u21
   470     075F  2F61               	goto	u20
   471     0760                     u21:
   472     0760  2F43               	goto	l651
   473     0761                     u20:
   474     0761                     l33:	
   475                           ;main.c: 51:     while(1);
   476                           
   477     0761  2F61               	goto	l33
   478     0762  120A  118A  2800   	ljmp	start
   479     0765                     __end_of_main:
   480                           
   481                           	psect	text1
   482     0765                     __ptext1:	
   483 ;; *************** function _init *****************
   484 ;; Defined at:
   485 ;;		line 54 in file "main.c"
   486 ;; Parameters:    Size  Location     Type
   487 ;;		None
   488 ;; Auto vars:     Size  Location     Type
   489 ;;		None
   490 ;; Return value:  Size  Location     Type
   491 ;;                  1    wreg      void 
   492 ;; Registers used:
   493 ;;		wreg, status,2, status,0, pclath, cstack
   494 ;; Tracked objects:
   495 ;;		On entry : 0/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   499 ;;      Params:         0       0       0       0       0
   500 ;;      Locals:         0       0       0       0       0
   501 ;;      Temps:          2       0       0       0       0
   502 ;;      Totals:         2       0       0       0       0
   503 ;;Total ram usage:        2 bytes
   504 ;; Hardware stack levels used: 1
   505 ;; Hardware stack levels required when called: 1
   506 ;; This function calls:
   507 ;;		_Lcd_command
   508 ;; This function is called by:
   509 ;;		_main
   510 ;; This function uses a non-reentrant model
   511 ;;
   512                           
   513     0765                     _init:	
   514                           ;psect for function _init
   515                           
   516     0765                     l597:	
   517                           ;incstack = 0
   518                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
   519                           
   520                           
   521                           ;main.c: 56:     TRISC = 0x00;
   522     0765  1683               	bsf	3,5	;RP0=1, select bank1
   523     0766  1303               	bcf	3,6	;RP1=0, select bank1
   524     0767  0187               	clrf	7	;volatile
   525                           
   526                           ;main.c: 57:     TRISD = 0x00;
   527     0768  0188               	clrf	8	;volatile
   528     0769                     l599:
   529                           
   530                           ;main.c: 59:     Lcd_command(0x30);
   531     0769  3030               	movlw	48
   532     076A  120A  118A  26DB  120A  118A  	fcall	_Lcd_command
   533     076F                     l601:
   534                           
   535                           ;main.c: 60:     _delay((unsigned long)((100)*(4000000/4000.0)));
   536     076F  3082               	movlw	130
   537     0770  00FB               	movwf	??_init+1
   538     0771  30DD               	movlw	221
   539     0772  00FA               	movwf	??_init
   540     0773                     u37:
   541     0773  0BFA               	decfsz	??_init,f
   542     0774  2F73               	goto	u37
   543     0775  0BFB               	decfsz	??_init+1,f
   544     0776  2F73               	goto	u37
   545     0777  2F78               	nop2
   546     0778                     l603:
   547                           
   548                           ;main.c: 61:     Lcd_command(0x30);
   549     0778  3030               	movlw	48
   550     0779  120A  118A  26DB  120A  118A  	fcall	_Lcd_command
   551     077E                     l605:
   552                           
   553                           ;main.c: 62:     _delay((unsigned long)((100)*(4000000/4000.0)));
   554     077E  3082               	movlw	130
   555     077F  00FB               	movwf	??_init+1
   556     0780  30DD               	movlw	221
   557     0781  00FA               	movwf	??_init
   558     0782                     u47:
   559     0782  0BFA               	decfsz	??_init,f
   560     0783  2F82               	goto	u47
   561     0784  0BFB               	decfsz	??_init+1,f
   562     0785  2F82               	goto	u47
   563     0786  2F87               	nop2
   564     0787                     l607:
   565                           
   566                           ;main.c: 63:     Lcd_command(0x30);
   567     0787  3030               	movlw	48
   568     0788  120A  118A  26DB  120A  118A  	fcall	_Lcd_command
   569     078D                     l609:
   570                           
   571                           ;main.c: 64:     _delay((unsigned long)((100)*(4000000/4000.0)));
   572     078D  3082               	movlw	130
   573     078E  00FB               	movwf	??_init+1
   574     078F  30DD               	movlw	221
   575     0790  00FA               	movwf	??_init
   576     0791                     u57:
   577     0791  0BFA               	decfsz	??_init,f
   578     0792  2F91               	goto	u57
   579     0793  0BFB               	decfsz	??_init+1,f
   580     0794  2F91               	goto	u57
   581     0795  2F96               	nop2
   582     0796                     l611:
   583                           
   584                           ;main.c: 65:     Lcd_command(0x38);
   585     0796  3038               	movlw	56
   586     0797  120A  118A  26DB  120A  118A  	fcall	_Lcd_command
   587     079C                     l613:
   588                           
   589                           ;main.c: 66:     _delay((unsigned long)((100)*(4000000/4000.0)));
   590     079C  3082               	movlw	130
   591     079D  00FB               	movwf	??_init+1
   592     079E  30DD               	movlw	221
   593     079F  00FA               	movwf	??_init
   594     07A0                     u67:
   595     07A0  0BFA               	decfsz	??_init,f
   596     07A1  2FA0               	goto	u67
   597     07A2  0BFB               	decfsz	??_init+1,f
   598     07A3  2FA0               	goto	u67
   599     07A4  2FA5               	nop2
   600     07A5                     l615:
   601                           
   602                           ;main.c: 67:     Lcd_command(0x0C);
   603     07A5  300C               	movlw	12
   604     07A6  120A  118A  26DB  120A  118A  	fcall	_Lcd_command
   605     07AB                     l617:
   606                           
   607                           ;main.c: 68:     _delay((unsigned long)((100)*(4000000/4000.0)));
   608     07AB  3082               	movlw	130
   609     07AC  00FB               	movwf	??_init+1
   610     07AD  30DD               	movlw	221
   611     07AE  00FA               	movwf	??_init
   612     07AF                     u77:
   613     07AF  0BFA               	decfsz	??_init,f
   614     07B0  2FAF               	goto	u77
   615     07B1  0BFB               	decfsz	??_init+1,f
   616     07B2  2FAF               	goto	u77
   617     07B3  2FB4               	nop2
   618     07B4                     l619:
   619                           
   620                           ;main.c: 69:     Lcd_command(0x01);
   621     07B4  3001               	movlw	1
   622     07B5  120A  118A  26DB  120A  118A  	fcall	_Lcd_command
   623     07BA                     l621:
   624                           
   625                           ;main.c: 70:     _delay((unsigned long)((100)*(4000000/4000.0)));
   626     07BA  3082               	movlw	130
   627     07BB  00FB               	movwf	??_init+1
   628     07BC  30DD               	movlw	221
   629     07BD  00FA               	movwf	??_init
   630     07BE                     u87:
   631     07BE  0BFA               	decfsz	??_init,f
   632     07BF  2FBE               	goto	u87
   633     07C0  0BFB               	decfsz	??_init+1,f
   634     07C1  2FBE               	goto	u87
   635     07C2  2FC3               	nop2
   636     07C3                     l39:
   637     07C3  0008               	return
   638     07C4                     __end_of_init:
   639                           
   640                           	psect	text2
   641     06DB                     __ptext2:	
   642 ;; *************** function _Lcd_command *****************
   643 ;; Defined at:
   644 ;;		line 82 in file "main.c"
   645 ;; Parameters:    Size  Location     Type
   646 ;;  i               1    wreg     unsigned char 
   647 ;; Auto vars:     Size  Location     Type
   648 ;;  i               1    2[COMMON] unsigned char 
   649 ;; Return value:  Size  Location     Type
   650 ;;                  1    wreg      void 
   651 ;; Registers used:
   652 ;;		wreg
   653 ;; Tracked objects:
   654 ;;		On entry : 0/0
   655 ;;		On exit  : 0/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   658 ;;      Params:         0       0       0       0       0
   659 ;;      Locals:         1       0       0       0       0
   660 ;;      Temps:          2       0       0       0       0
   661 ;;      Totals:         3       0       0       0       0
   662 ;;Total ram usage:        3 bytes
   663 ;; Hardware stack levels used: 1
   664 ;; This function calls:
   665 ;;		Nothing
   666 ;; This function is called by:
   667 ;;		_main
   668 ;;		_init
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672     06DB                     _Lcd_command:	
   673                           ;psect for function _Lcd_command
   674                           
   675                           
   676                           ;incstack = 0
   677                           ; Regs used in _Lcd_command: [wreg]
   678                           ;Lcd_command@i stored from wreg
   679     06DB  00F9               	movwf	Lcd_command@i
   680     06DC                     l589:
   681                           
   682                           ;main.c: 82: void Lcd_command(unsigned char i);main.c: 83: {;main.c: 84:     RC3 = 0;
   683     06DC  1283               	bcf	3,5	;RP0=0, select bank0
   684     06DD  1303               	bcf	3,6	;RP1=0, select bank0
   685     06DE  1187               	bcf	7,3	;volatile
   686     06DF                     l591:
   687                           
   688                           ;main.c: 85:     PORTD = i;
   689     06DF  0879               	movf	Lcd_command@i,w
   690     06E0  0088               	movwf	8	;volatile
   691     06E1                     l593:
   692                           
   693                           ;main.c: 86:     RC0 = 1;
   694     06E1  1407               	bsf	7,0	;volatile
   695                           
   696                           ;main.c: 87:     _delay((unsigned long)((5)*(4000000/4000.0)));
   697     06E2  3007               	movlw	7
   698     06E3  00F8               	movwf	??_Lcd_command+1
   699     06E4  307D               	movlw	125
   700     06E5  00F7               	movwf	??_Lcd_command
   701     06E6                     u97:
   702     06E6  0BF7               	decfsz	??_Lcd_command,f
   703     06E7  2EE6               	goto	u97
   704     06E8  0BF8               	decfsz	??_Lcd_command+1,f
   705     06E9  2EE6               	goto	u97
   706     06EA                     l595:
   707                           
   708                           ;main.c: 88:     RC0 = 0;
   709     06EA  1283               	bcf	3,5	;RP0=0, select bank0
   710     06EB  1303               	bcf	3,6	;RP1=0, select bank0
   711     06EC  1007               	bcf	7,0	;volatile
   712     06ED                     l45:
   713     06ED  0008               	return
   714     06EE                     __end_of_Lcd_command:
   715                           
   716                           	psect	text3
   717     06C8                     __ptext3:	
   718 ;; *************** function _Lcd_data *****************
   719 ;; Defined at:
   720 ;;		line 73 in file "main.c"
   721 ;; Parameters:    Size  Location     Type
   722 ;;  i               1    wreg     unsigned char 
   723 ;; Auto vars:     Size  Location     Type
   724 ;;  i               1    2[COMMON] unsigned char 
   725 ;; Return value:  Size  Location     Type
   726 ;;                  1    wreg      void 
   727 ;; Registers used:
   728 ;;		wreg
   729 ;; Tracked objects:
   730 ;;		On entry : 0/0
   731 ;;		On exit  : 0/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   734 ;;      Params:         0       0       0       0       0
   735 ;;      Locals:         1       0       0       0       0
   736 ;;      Temps:          2       0       0       0       0
   737 ;;      Totals:         3       0       0       0       0
   738 ;;Total ram usage:        3 bytes
   739 ;; Hardware stack levels used: 1
   740 ;; This function calls:
   741 ;;		Nothing
   742 ;; This function is called by:
   743 ;;		_main
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747     06C8                     _Lcd_data:	
   748                           ;psect for function _Lcd_data
   749                           
   750                           
   751                           ;incstack = 0
   752                           ; Regs used in _Lcd_data: [wreg]
   753                           ;Lcd_data@i stored from wreg
   754     06C8  00F9               	movwf	Lcd_data@i
   755     06C9                     l623:
   756                           
   757                           ;main.c: 73: void Lcd_data(unsigned char i);main.c: 74: {;main.c: 75:     RC3 = 1;
   758     06C9  1283               	bcf	3,5	;RP0=0, select bank0
   759     06CA  1303               	bcf	3,6	;RP1=0, select bank0
   760     06CB  1587               	bsf	7,3	;volatile
   761     06CC                     l625:
   762                           
   763                           ;main.c: 76:     PORTD = i;
   764     06CC  0879               	movf	Lcd_data@i,w
   765     06CD  0088               	movwf	8	;volatile
   766     06CE                     l627:
   767                           
   768                           ;main.c: 77:     RC0 = 1;
   769     06CE  1407               	bsf	7,0	;volatile
   770                           
   771                           ;main.c: 78:     _delay((unsigned long)((5)*(4000000/4000.0)));
   772     06CF  3007               	movlw	7
   773     06D0  00F8               	movwf	??_Lcd_data+1
   774     06D1  307D               	movlw	125
   775     06D2  00F7               	movwf	??_Lcd_data
   776     06D3                     u107:
   777     06D3  0BF7               	decfsz	??_Lcd_data,f
   778     06D4  2ED3               	goto	u107
   779     06D5  0BF8               	decfsz	??_Lcd_data+1,f
   780     06D6  2ED3               	goto	u107
   781     06D7                     l629:
   782                           
   783                           ;main.c: 79:     RC0 = 0;
   784     06D7  1283               	bcf	3,5	;RP0=0, select bank0
   785     06D8  1303               	bcf	3,6	;RP1=0, select bank0
   786     06D9  1007               	bcf	7,0	;volatile
   787     06DA                     l42:
   788     06DA  0008               	return
   789     06DB                     __end_of_Lcd_data:
   790     0002                     ___latbits      equ	2
   791     007E                     btemp           set	126	;btemp
   792     007E                     wtemp0          set	126
   793                           
   794                           	psect	config
   795                           
   796                           ;Config register CONFIG @ 0x2007
   797                           ;	Oscillator Selection bits
   798                           ;	FOSC = EXTRC, RC oscillator
   799                           ;	Watchdog Timer Enable bit
   800                           ;	WDTE = OFF, WDT disabled
   801                           ;	Power-up Timer Enable bit
   802                           ;	PWRTE = OFF, PWRT disabled
   803                           ;	Brown-out Reset Enable bit
   804                           ;	BOREN = ON, BOR enabled
   805                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   806                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   807                           ;	Data EEPROM Memory Code Protection bit
   808                           ;	CPD = OFF, Data EEPROM code protection off
   809                           ;	Flash Program Memory Write Enable bits
   810                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   811                           ;	In-Circuit Debugger Mode bit
   812                           ;	DEBUG = 0x1, unprogrammed default
   813                           ;	Flash Program Memory Code Protection bit
   814                           ;	CP = OFF, Code protection off
   815     2007                     	org	8199
   816     2007  3F7B               	dw	16251

Data Sizes:
    Strings     0
    Constant    0
    Data        39
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80      0      32
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_init
    _init->_Lcd_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     165
                                              5 COMMON     2     2      0
                        _Lcd_command
                           _Lcd_data
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0      15
                                              3 COMMON     2     2      0
                        _Lcd_command
 ---------------------------------------------------------------------------------
 (2) _Lcd_command                                          3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_data                                             3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_command
   _Lcd_data
   _init
     _Lcd_command

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80      0      32     40.0%
BITBANK0            80      0       0      0.0%
COMMON              14      7      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      46      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Mon Mar 17 11:33:01 2025

                      pc 0002                       l33 0761                       l42 06DA  
                     l45 06ED                       l39 07C3                       u10 0742  
                     u11 0741                       u20 0761                       u21 0760  
                     u37 0773                       u47 0782                       u57 0791  
                     u67 07A0                       u77 07AF                       u87 07BE  
                     u97 06E6                       fsr 0004                      l601 076F  
                    l611 0796                      l603 0778                      l621 07BA  
                    l613 079C                      l605 077E                      l623 06C9  
                    l615 07A5                      l607 0787                      l631 0721  
                    l625 06CC                      l617 07AB                      l609 078D  
                    l641 073A                      l633 0726                      l627 06CE  
                    l619 07B4                      l651 0743                      l643 073C  
                    l629 06D7                      l653 0759                      l645 0742  
                    l591 06DF                      l655 075B                      l639 0727  
                    l593 06E1                      l595 06EA                      l589 06DC  
                    l597 0765                      l599 0769                      _RC0 0038  
                    _RC3 003B                      u107 06D3                      fsr0 0004  
                    indf 0000                     _main 0721                     _init 0765  
                   btemp 007E                     start 0000      __end_of_Lcd_command 06EE  
                  ?_main 0077                    ?_init 0077                    _PORTD 0008  
                  _TRISC 0087                    _TRISD 0088                    _array 0070  
                  _lower 0020                    main@i 007D                    _upper 0030  
                  pclath 000A                    status 0003                    wtemp0 007E  
       __end_of_Lcd_data 06DB          __initialization 07C4             __end_of_main 0765  
           __end_of_init 07C4                   ??_main 007C                   ??_init 007A  
            _Lcd_command 06DB             __pdataCOMMON 0070  __end_of__initialization 07FC  
         __pcstackCOMMON 0077             __pidataBANK0 0701                ?_Lcd_data 0077  
             __pmaintext 0721               ??_Lcd_data 0077                  __ptext1 0765  
                __ptext2 06DB                  __ptext3 06C8     end_of_initialization 07FC  
           ?_Lcd_command 0077                Lcd_data@i 0079            __pidataCOMMON 06C1  
    start_initialization 07C4               init_fetch0 06EE              __pdataBANK0 0020  
              ___latbits 0002                 _Lcd_data 06C8             Lcd_command@i 0079  
               init_ram0 06F2            ??_Lcd_command 0077  
