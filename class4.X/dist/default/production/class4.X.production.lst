

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Mar 26 12:06:57 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,space=0,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     9                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=1
    13                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=1
    14                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 12/10/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0004                     fsr             equ	4
    53     0004                     fsr0            equ	4
    54     0000                     indf            equ	0
    55     0000                     indf0           equ	0
    56     0002                     pc              equ	2
    57     0002                     pcl             equ	2
    58     000A                     pclath          equ	10
    59     0003                     status          equ	3
    60     0000                     INDF            equ	0	;# 
    61     0001                     TMR0            equ	1	;# 
    62     0002                     PCL             equ	2	;# 
    63     0003                     STATUS          equ	3	;# 
    64     0004                     FSR             equ	4	;# 
    65     0005                     PORTA           equ	5	;# 
    66     0006                     PORTB           equ	6	;# 
    67     0007                     PORTC           equ	7	;# 
    68     0008                     PORTD           equ	8	;# 
    69     0009                     PORTE           equ	9	;# 
    70     000A                     PCLATH          equ	10	;# 
    71     000B                     INTCON          equ	11	;# 
    72     000C                     PIR1            equ	12	;# 
    73     000D                     PIR2            equ	13	;# 
    74     000E                     TMR1            equ	14	;# 
    75     000E                     TMR1L           equ	14	;# 
    76     000F                     TMR1H           equ	15	;# 
    77     0010                     T1CON           equ	16	;# 
    78     0011                     TMR2            equ	17	;# 
    79     0012                     T2CON           equ	18	;# 
    80     0013                     SSPBUF          equ	19	;# 
    81     0014                     SSPCON          equ	20	;# 
    82     0015                     CCPR1           equ	21	;# 
    83     0015                     CCPR1L          equ	21	;# 
    84     0016                     CCPR1H          equ	22	;# 
    85     0017                     CCP1CON         equ	23	;# 
    86     0018                     RCSTA           equ	24	;# 
    87     0019                     TXREG           equ	25	;# 
    88     001A                     RCREG           equ	26	;# 
    89     001B                     CCPR2           equ	27	;# 
    90     001B                     CCPR2L          equ	27	;# 
    91     001C                     CCPR2H          equ	28	;# 
    92     001D                     CCP2CON         equ	29	;# 
    93     001E                     ADRESH          equ	30	;# 
    94     001F                     ADCON0          equ	31	;# 
    95     0081                     OPTION_REG      equ	129	;# 
    96     0085                     TRISA           equ	133	;# 
    97     0086                     TRISB           equ	134	;# 
    98     0087                     TRISC           equ	135	;# 
    99     0088                     TRISD           equ	136	;# 
   100     0089                     TRISE           equ	137	;# 
   101     008C                     PIE1            equ	140	;# 
   102     008D                     PIE2            equ	141	;# 
   103     008E                     PCON            equ	142	;# 
   104     0091                     SSPCON2         equ	145	;# 
   105     0092                     PR2             equ	146	;# 
   106     0093                     SSPADD          equ	147	;# 
   107     0094                     SSPSTAT         equ	148	;# 
   108     0098                     TXSTA           equ	152	;# 
   109     0099                     SPBRG           equ	153	;# 
   110     009C                     CMCON           equ	156	;# 
   111     009D                     CVRCON          equ	157	;# 
   112     009E                     ADRESL          equ	158	;# 
   113     009F                     ADCON1          equ	159	;# 
   114     010C                     EEDATA          equ	268	;# 
   115     010D                     EEADR           equ	269	;# 
   116     010E                     EEDATH          equ	270	;# 
   117     010F                     EEADRH          equ	271	;# 
   118     018C                     EECON1          equ	396	;# 
   119     018D                     EECON2          equ	397	;# 
   120     0000                     INDF            equ	0	;# 
   121     0001                     TMR0            equ	1	;# 
   122     0002                     PCL             equ	2	;# 
   123     0003                     STATUS          equ	3	;# 
   124     0004                     FSR             equ	4	;# 
   125     0005                     PORTA           equ	5	;# 
   126     0006                     PORTB           equ	6	;# 
   127     0007                     PORTC           equ	7	;# 
   128     0008                     PORTD           equ	8	;# 
   129     0009                     PORTE           equ	9	;# 
   130     000A                     PCLATH          equ	10	;# 
   131     000B                     INTCON          equ	11	;# 
   132     000C                     PIR1            equ	12	;# 
   133     000D                     PIR2            equ	13	;# 
   134     000E                     TMR1            equ	14	;# 
   135     000E                     TMR1L           equ	14	;# 
   136     000F                     TMR1H           equ	15	;# 
   137     0010                     T1CON           equ	16	;# 
   138     0011                     TMR2            equ	17	;# 
   139     0012                     T2CON           equ	18	;# 
   140     0013                     SSPBUF          equ	19	;# 
   141     0014                     SSPCON          equ	20	;# 
   142     0015                     CCPR1           equ	21	;# 
   143     0015                     CCPR1L          equ	21	;# 
   144     0016                     CCPR1H          equ	22	;# 
   145     0017                     CCP1CON         equ	23	;# 
   146     0018                     RCSTA           equ	24	;# 
   147     0019                     TXREG           equ	25	;# 
   148     001A                     RCREG           equ	26	;# 
   149     001B                     CCPR2           equ	27	;# 
   150     001B                     CCPR2L          equ	27	;# 
   151     001C                     CCPR2H          equ	28	;# 
   152     001D                     CCP2CON         equ	29	;# 
   153     001E                     ADRESH          equ	30	;# 
   154     001F                     ADCON0          equ	31	;# 
   155     0081                     OPTION_REG      equ	129	;# 
   156     0085                     TRISA           equ	133	;# 
   157     0086                     TRISB           equ	134	;# 
   158     0087                     TRISC           equ	135	;# 
   159     0088                     TRISD           equ	136	;# 
   160     0089                     TRISE           equ	137	;# 
   161     008C                     PIE1            equ	140	;# 
   162     008D                     PIE2            equ	141	;# 
   163     008E                     PCON            equ	142	;# 
   164     0091                     SSPCON2         equ	145	;# 
   165     0092                     PR2             equ	146	;# 
   166     0093                     SSPADD          equ	147	;# 
   167     0094                     SSPSTAT         equ	148	;# 
   168     0098                     TXSTA           equ	152	;# 
   169     0099                     SPBRG           equ	153	;# 
   170     009C                     CMCON           equ	156	;# 
   171     009D                     CVRCON          equ	157	;# 
   172     009E                     ADRESL          equ	158	;# 
   173     009F                     ADCON1          equ	159	;# 
   174     010C                     EEDATA          equ	268	;# 
   175     010D                     EEADR           equ	269	;# 
   176     010E                     EEDATH          equ	270	;# 
   177     010F                     EEADRH          equ	271	;# 
   178     018C                     EECON1          equ	396	;# 
   179     018D                     EECON2          equ	397	;# 
   180     0008                     _PORTD          set	8
   181     0007                     _PORTC          set	7
   182     0088                     _TRISD          set	136
   183     0087                     _TRISC          set	135
   184                           
   185                           	psect	cinit
   186     07F3                     start_initialization:	
   187                           ; #config settings
   188                           
   189     07F3                     __initialization:
   190                           
   191                           ; Clear objects allocated to BANK0
   192     07F3  1383               	bcf	3,7	;select IRP bank0
   193     07F4  3020               	movlw	low __pbssBANK0
   194     07F5  0084               	movwf	4
   195     07F6  3034               	movlw	low (__pbssBANK0+20)
   196     07F7  120A  118A  2641  120A  118A  	fcall	clear_ram0
   197     07FC                     end_of_initialization:	
   198                           ;End of C runtime variable initialization code
   199                           
   200     07FC                     __end_of__initialization:
   201     07FC  0183               	clrf	3
   202     07FD  120A  118A  2EC3   	ljmp	_main	;jump to C main() function
   203                           
   204                           	psect	bssBANK0
   205     0020                     __pbssBANK0:
   206     0020                     _k:
   207     0020                     	ds	5
   208     0025                     _n:
   209     0025                     	ds	2
   210     0027                     _m:
   211     0027                     	ds	2
   212     0029                     _delaycount:
   213     0029                     	ds	2
   214     002B                     _sum:
   215     002B                     	ds	2
   216     002D                     _num2:
   217     002D                     	ds	2
   218     002F                     _num1:
   219     002F                     	ds	2
   220     0031                     _Plus:
   221     0031                     	ds	1
   222     0032                     _Equal:
   223     0032                     	ds	1
   224     0033                     _j:
   225     0033                     	ds	1
   226                           
   227                           	psect	clrtext
   228     0641                     clear_ram0:	
   229                           ;	Called with FSR containing the base address, and
   230                           ;	W with the last address+1
   231                           
   232     0641  0064               	clrwdt	;clear the watchdog before getting into this loop
   233     0642                     clrloop0:
   234     0642  0180               	clrf	0	;clear RAM location pointed to by FSR
   235     0643  0A84               	incf	4,f	;increment pointer
   236     0644  0604               	xorwf	4,w	;XOR with final address
   237     0645  1903               	btfsc	3,2	;have we reached the end yet?
   238     0646  3400               	retlw	0	;all done for this memory range, return
   239     0647  0604               	xorwf	4,w	;XOR again to restore value
   240     0648  2E42               	goto	clrloop0	;do the next byte
   241                           
   242                           	psect	cstackCOMMON
   243     0070                     __pcstackCOMMON:
   244     0070                     ?_Lcd_Init:
   245     0070                     ?_Lcd_Command:	
   246                           ; 1 bytes @ 0x0
   247                           
   248     0070                     ?_Lcd_Data:	
   249                           ; 1 bytes @ 0x0
   250                           
   251     0070                     ?_main:	
   252                           ; 1 bytes @ 0x0
   253                           
   254     0070                     ?___lwdiv:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     0070                     ___lwdiv@divisor:	
   258                           ; 2 bytes @ 0x0
   259                           
   260     0070                     ??_Lcd_Command:	
   261                           ; 2 bytes @ 0x0
   262                           
   263     0070                     ??_Lcd_Data:	
   264                           ; 1 bytes @ 0x0
   265                           
   266                           
   267                           ; 1 bytes @ 0x0
   268     0070                     	ds	2
   269     0072                     Lcd_Command@cmd:
   270     0072                     Lcd_Data@data:	
   271                           ; 1 bytes @ 0x2
   272                           
   273     0072                     ___lwdiv@dividend:	
   274                           ; 1 bytes @ 0x2
   275                           
   276                           
   277                           ; 2 bytes @ 0x2
   278     0072                     	ds	1
   279     0073                     ??_Lcd_Init:
   280                           
   281                           ; 1 bytes @ 0x3
   282     0073                     	ds	1
   283     0074                     ___lwdiv@quotient:
   284     0074                     ??___lwdiv:	
   285                           ; 2 bytes @ 0x4
   286                           
   287                           
   288                           ; 1 bytes @ 0x4
   289     0074                     	ds	2
   290     0076                     ___lwdiv@counter:
   291                           
   292                           ; 1 bytes @ 0x6
   293     0076                     	ds	1
   294     0077                     ?___bmul:
   295     0077                     ___bmul@multiplicand:	
   296                           ; 1 bytes @ 0x7
   297                           
   298                           
   299                           ; 1 bytes @ 0x7
   300     0077                     	ds	1
   301     0078                     ___bmul@product:
   302     0078                     ??___bmul:	
   303                           ; 1 bytes @ 0x8
   304                           
   305                           
   306                           ; 1 bytes @ 0x8
   307     0078                     	ds	1
   308     0079                     ___bmul@multiplier:
   309                           
   310                           ; 1 bytes @ 0x9
   311     0079                     	ds	1
   312     007A                     ?_LcdOutput:
   313     007A                     LcdOutput@i:	
   314                           ; 1 bytes @ 0xA
   315                           
   316                           
   317                           ; 2 bytes @ 0xA
   318     007A                     	ds	2
   319     007C                     LcdOutput@s:
   320     007C                     ??_LcdOutput:	
   321                           ; 1 bytes @ 0xC
   322                           
   323                           
   324                           ; 1 bytes @ 0xC
   325     007C                     	ds	1
   326     007D                     LcdOutput@j:
   327                           
   328                           ; 1 bytes @ 0xD
   329     007D                     	ds	1
   330     007E                     ??_main:
   331                           
   332                           	psect	maintext
   333     06C3                     __pmaintext:	
   334                           ; 1 bytes @ 0xE
   335 ;;
   336 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   337 ;;
   338 ;; *************** function _main *****************
   339 ;; Defined at:
   340 ;;		line 29 in file "class4_sum.c"
   341 ;; Parameters:    Size  Location     Type
   342 ;;		None
   343 ;; Auto vars:     Size  Location     Type
   344 ;;		None
   345 ;; Return value:  Size  Location     Type
   346 ;;                  1    wreg      void 
   347 ;; Registers used:
   348 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   349 ;; Tracked objects:
   350 ;;		On entry : B00/0
   351 ;;		On exit  : 0/0
   352 ;;		Unchanged: 0/0
   353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   354 ;;      Params:         0       0       0       0       0
   355 ;;      Locals:         0       0       0       0       0
   356 ;;      Temps:          0       0       0       0       0
   357 ;;      Totals:         0       0       0       0       0
   358 ;;Total ram usage:        0 bytes
   359 ;; Hardware stack levels required when called: 2
   360 ;; This function calls:
   361 ;;		_LcdOutput
   362 ;;		_Lcd_Command
   363 ;;		_Lcd_Data
   364 ;;		_Lcd_Init
   365 ;; This function is called by:
   366 ;;		Startup code after reset
   367 ;; This function uses a non-reentrant model
   368 ;;
   369                           
   370     06C3                     _main:	
   371                           ;psect for function _main
   372                           
   373     06C3                     l874:	
   374                           ;incstack = 0
   375                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   376                           
   377                           
   378                           ;class4_sum.c: 30:     Lcd_Init();
   379     06C3  120A  118A  278C  120A  118A  	fcall	_Lcd_Init
   380     06C8                     l876:
   381                           
   382                           ;class4_sum.c: 32:     num1 = 468;
   383     06C8  30D4               	movlw	212
   384     06C9  1283               	bcf	3,5	;RP0=0, select bank0
   385     06CA  1303               	bcf	3,6	;RP1=0, select bank0
   386     06CB  00AF               	movwf	_num1
   387     06CC  3001               	movlw	1
   388     06CD  00B0               	movwf	_num1+1
   389     06CE                     l878:
   390                           
   391                           ;class4_sum.c: 33:     num2 = 253;
   392     06CE  30FD               	movlw	253
   393     06CF  00AD               	movwf	_num2
   394     06D0  3000               	movlw	0
   395     06D1  00AE               	movwf	_num2+1
   396     06D2                     l880:
   397                           
   398                           ;class4_sum.c: 34:     Equal = '=';
   399     06D2  303D               	movlw	61
   400     06D3  00B2               	movwf	_Equal
   401     06D4                     l882:
   402                           
   403                           ;class4_sum.c: 35:     Plus = '+';
   404     06D4  302B               	movlw	43
   405     06D5  00B1               	movwf	_Plus
   406                           
   407                           ;class4_sum.c: 38:     Lcd_Command(0x80);
   408     06D6  3080               	movlw	128
   409     06D7  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   410     06DC                     l884:
   411                           
   412                           ;class4_sum.c: 39:     LcdOutput(num1);
   413     06DC  30D4               	movlw	212
   414     06DD  00FA               	movwf	LcdOutput@i
   415     06DE  3001               	movlw	1
   416     06DF  00FB               	movwf	LcdOutput@i+1
   417     06E0  120A  118A  2725  120A  118A  	fcall	_LcdOutput
   418     06E5                     l886:
   419                           
   420                           ;class4_sum.c: 42:     Lcd_Command(0x83);
   421     06E5  3083               	movlw	131
   422     06E6  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   423     06EB                     l888:
   424                           
   425                           ;class4_sum.c: 43:     Lcd_Data(Plus);
   426     06EB  302B               	movlw	43
   427     06EC  120A  118A  2649  120A  118A  	fcall	_Lcd_Data
   428     06F1                     l890:
   429                           
   430                           ;class4_sum.c: 46:     Lcd_Command(0x84);
   431     06F1  3084               	movlw	132
   432     06F2  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   433                           
   434                           ;class4_sum.c: 47:     LcdOutput(num2);
   435     06F7  30FD               	movlw	253
   436     06F8  00FA               	movwf	LcdOutput@i
   437     06F9  3000               	movlw	0
   438     06FA  00FB               	movwf	LcdOutput@i+1
   439     06FB  120A  118A  2725  120A  118A  	fcall	_LcdOutput
   440     0700                     l892:
   441                           
   442                           ;class4_sum.c: 50:     Lcd_Command(0x87);
   443     0700  3087               	movlw	135
   444     0701  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   445     0706                     l894:
   446                           
   447                           ;class4_sum.c: 51:     Lcd_Data(Equal);
   448     0706  303D               	movlw	61
   449     0707  120A  118A  2649  120A  118A  	fcall	_Lcd_Data
   450     070C                     l896:
   451                           
   452                           ;class4_sum.c: 54:     sum = num1 + num2;
   453     070C  30D1               	movlw	209
   454     070D  1283               	bcf	3,5	;RP0=0, select bank0
   455     070E  1303               	bcf	3,6	;RP1=0, select bank0
   456     070F  00AB               	movwf	_sum
   457     0710  3002               	movlw	2
   458     0711  00AC               	movwf	_sum+1
   459     0712                     l898:
   460                           
   461                           ;class4_sum.c: 56:     Lcd_Command(0x88);
   462     0712  3088               	movlw	136
   463     0713  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   464     0718                     l900:
   465                           
   466                           ;class4_sum.c: 57:     LcdOutput(sum);
   467     0718  30D1               	movlw	209
   468     0719  00FA               	movwf	LcdOutput@i
   469     071A  3002               	movlw	2
   470     071B  00FB               	movwf	LcdOutput@i+1
   471     071C  120A  118A  2725  120A  118A  	fcall	_LcdOutput
   472     0721                     l43:	
   473                           ;class4_sum.c: 58:     while(1);
   474                           
   475     0721                     l44:
   476     0721  2F21               	goto	l43
   477     0722  120A  118A  2800   	ljmp	start
   478     0725                     __end_of_main:
   479                           
   480                           	psect	text1
   481     078C                     __ptext1:	
   482 ;; *************** function _Lcd_Init *****************
   483 ;; Defined at:
   484 ;;		line 62 in file "class4_sum.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;		None
   487 ;; Auto vars:     Size  Location     Type
   488 ;;		None
   489 ;; Return value:  Size  Location     Type
   490 ;;                  1    wreg      void 
   491 ;; Registers used:
   492 ;;		wreg, status,2, status,0, pclath, cstack
   493 ;; Tracked objects:
   494 ;;		On entry : 0/0
   495 ;;		On exit  : 0/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   498 ;;      Params:         0       0       0       0       0
   499 ;;      Locals:         0       0       0       0       0
   500 ;;      Temps:          2       0       0       0       0
   501 ;;      Totals:         2       0       0       0       0
   502 ;;Total ram usage:        2 bytes
   503 ;; Hardware stack levels used: 1
   504 ;; Hardware stack levels required when called: 1
   505 ;; This function calls:
   506 ;;		_Lcd_Command
   507 ;; This function is called by:
   508 ;;		_main
   509 ;; This function uses a non-reentrant model
   510 ;;
   511                           
   512     078C                     _Lcd_Init:	
   513                           ;psect for function _Lcd_Init
   514                           
   515     078C                     l818:	
   516                           ;incstack = 0
   517                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
   518                           
   519                           
   520                           ;class4_sum.c: 64: TRISC = 0x00;
   521     078C  1683               	bsf	3,5	;RP0=1, select bank1
   522     078D  1303               	bcf	3,6	;RP1=0, select bank1
   523     078E  0187               	clrf	7	;volatile
   524                           
   525                           ;class4_sum.c: 65: TRISD = 0x00;
   526     078F  0188               	clrf	8	;volatile
   527     0790                     l820:
   528                           
   529                           ;class4_sum.c: 70:     Lcd_Command(0x30);
   530     0790  3030               	movlw	48
   531     0791  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   532     0796                     l822:
   533                           
   534                           ;class4_sum.c: 71:     _delay((unsigned long)((100)*(6000000/4000.0)));
   535     0796  30C3               	movlw	195
   536     0797  00F4               	movwf	??_Lcd_Init+1
   537     0798  30CD               	movlw	205
   538     0799  00F3               	movwf	??_Lcd_Init
   539     079A                     u247:
   540     079A  0BF3               	decfsz	??_Lcd_Init,f
   541     079B  2F9A               	goto	u247
   542     079C  0BF4               	decfsz	??_Lcd_Init+1,f
   543     079D  2F9A               	goto	u247
   544     079E                     l824:
   545                           
   546                           ;class4_sum.c: 73:     Lcd_Command(0x30);
   547     079E  3030               	movlw	48
   548     079F  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   549     07A4                     l826:
   550                           
   551                           ;class4_sum.c: 74:      _delay((unsigned long)((100)*(6000000/4000.0)));
   552     07A4  30C3               	movlw	195
   553     07A5  00F4               	movwf	??_Lcd_Init+1
   554     07A6  30CD               	movlw	205
   555     07A7  00F3               	movwf	??_Lcd_Init
   556     07A8                     u257:
   557     07A8  0BF3               	decfsz	??_Lcd_Init,f
   558     07A9  2FA8               	goto	u257
   559     07AA  0BF4               	decfsz	??_Lcd_Init+1,f
   560     07AB  2FA8               	goto	u257
   561     07AC                     l828:
   562                           
   563                           ;class4_sum.c: 76:     Lcd_Command(0x30);
   564     07AC  3030               	movlw	48
   565     07AD  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   566     07B2                     l830:
   567                           
   568                           ;class4_sum.c: 77:      _delay((unsigned long)((100)*(6000000/4000.0)));
   569     07B2  30C3               	movlw	195
   570     07B3  00F4               	movwf	??_Lcd_Init+1
   571     07B4  30CD               	movlw	205
   572     07B5  00F3               	movwf	??_Lcd_Init
   573     07B6                     u267:
   574     07B6  0BF3               	decfsz	??_Lcd_Init,f
   575     07B7  2FB6               	goto	u267
   576     07B8  0BF4               	decfsz	??_Lcd_Init+1,f
   577     07B9  2FB6               	goto	u267
   578     07BA                     l832:
   579                           
   580                           ;class4_sum.c: 79:     Lcd_Command(0x38);
   581     07BA  3038               	movlw	56
   582     07BB  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   583     07C0                     l834:
   584                           
   585                           ;class4_sum.c: 80:     _delay((unsigned long)((100)*(6000000/4000.0)));
   586     07C0  30C3               	movlw	195
   587     07C1  00F4               	movwf	??_Lcd_Init+1
   588     07C2  30CD               	movlw	205
   589     07C3  00F3               	movwf	??_Lcd_Init
   590     07C4                     u277:
   591     07C4  0BF3               	decfsz	??_Lcd_Init,f
   592     07C5  2FC4               	goto	u277
   593     07C6  0BF4               	decfsz	??_Lcd_Init+1,f
   594     07C7  2FC4               	goto	u277
   595     07C8                     l836:
   596                           
   597                           ;class4_sum.c: 82:     Lcd_Command(0x06);
   598     07C8  3006               	movlw	6
   599     07C9  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   600     07CE                     l838:
   601                           
   602                           ;class4_sum.c: 83:      _delay((unsigned long)((100)*(6000000/4000.0)));
   603     07CE  30C3               	movlw	195
   604     07CF  00F4               	movwf	??_Lcd_Init+1
   605     07D0  30CD               	movlw	205
   606     07D1  00F3               	movwf	??_Lcd_Init
   607     07D2                     u287:
   608     07D2  0BF3               	decfsz	??_Lcd_Init,f
   609     07D3  2FD2               	goto	u287
   610     07D4  0BF4               	decfsz	??_Lcd_Init+1,f
   611     07D5  2FD2               	goto	u287
   612     07D6                     l840:
   613                           
   614                           ;class4_sum.c: 85:     Lcd_Command(0x0C);
   615     07D6  300C               	movlw	12
   616     07D7  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   617     07DC                     l842:
   618                           
   619                           ;class4_sum.c: 86:     _delay((unsigned long)((100)*(6000000/4000.0)));
   620     07DC  30C3               	movlw	195
   621     07DD  00F4               	movwf	??_Lcd_Init+1
   622     07DE  30CD               	movlw	205
   623     07DF  00F3               	movwf	??_Lcd_Init
   624     07E0                     u297:
   625     07E0  0BF3               	decfsz	??_Lcd_Init,f
   626     07E1  2FE0               	goto	u297
   627     07E2  0BF4               	decfsz	??_Lcd_Init+1,f
   628     07E3  2FE0               	goto	u297
   629     07E4                     l844:
   630                           
   631                           ;class4_sum.c: 88:     Lcd_Command(0x01);
   632     07E4  3001               	movlw	1
   633     07E5  120A  118A  266E  120A  118A  	fcall	_Lcd_Command
   634     07EA                     l846:
   635                           
   636                           ;class4_sum.c: 89:     _delay((unsigned long)((100)*(6000000/4000.0)));
   637     07EA  30C3               	movlw	195
   638     07EB  00F4               	movwf	??_Lcd_Init+1
   639     07EC  30CD               	movlw	205
   640     07ED  00F3               	movwf	??_Lcd_Init
   641     07EE                     u307:
   642     07EE  0BF3               	decfsz	??_Lcd_Init,f
   643     07EF  2FEE               	goto	u307
   644     07F0  0BF4               	decfsz	??_Lcd_Init+1,f
   645     07F1  2FEE               	goto	u307
   646     07F2                     l49:
   647     07F2  0008               	return
   648     07F3                     __end_of_Lcd_Init:
   649                           
   650                           	psect	text2
   651     066E                     __ptext2:	
   652 ;; *************** function _Lcd_Command *****************
   653 ;; Defined at:
   654 ;;		line 108 in file "class4_sum.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;  cmd             1    wreg     unsigned char 
   657 ;; Auto vars:     Size  Location     Type
   658 ;;  cmd             1    2[COMMON] unsigned char 
   659 ;; Return value:  Size  Location     Type
   660 ;;                  1    wreg      void 
   661 ;; Registers used:
   662 ;;		wreg, status,2, status,0
   663 ;; Tracked objects:
   664 ;;		On entry : 0/0
   665 ;;		On exit  : 0/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   668 ;;      Params:         0       0       0       0       0
   669 ;;      Locals:         1       0       0       0       0
   670 ;;      Temps:          2       0       0       0       0
   671 ;;      Totals:         3       0       0       0       0
   672 ;;Total ram usage:        3 bytes
   673 ;; Hardware stack levels used: 1
   674 ;; This function calls:
   675 ;;		Nothing
   676 ;; This function is called by:
   677 ;;		_main
   678 ;;		_Lcd_Init
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682     066E                     _Lcd_Command:	
   683                           ;psect for function _Lcd_Command
   684                           
   685                           
   686                           ;incstack = 0
   687                           ; Regs used in _Lcd_Command: [wreg+status,2+status,0]
   688                           ;Lcd_Command@cmd stored from wreg
   689     066E  00F2               	movwf	Lcd_Command@cmd
   690     066F                     l760:
   691                           
   692                           ;class4_sum.c: 109:     PORTC &= ~0x08;
   693     066F  30F7               	movlw	247
   694     0670  1283               	bcf	3,5	;RP0=0, select bank0
   695     0671  1303               	bcf	3,6	;RP1=0, select bank0
   696     0672  0587               	andwf	7,f	;volatile
   697     0673                     l762:
   698                           
   699                           ;class4_sum.c: 110:     PORTD = cmd;
   700     0673  0872               	movf	Lcd_Command@cmd,w
   701     0674  0088               	movwf	8	;volatile
   702     0675                     l764:
   703                           
   704                           ;class4_sum.c: 111:     PORTC |= 0x01;
   705     0675  1407               	bsf	7,0	;volatile
   706     0676                     l766:
   707                           
   708                           ;class4_sum.c: 112:     PORTC &= ~0x01;
   709     0676  30FE               	movlw	254
   710     0677  0587               	andwf	7,f	;volatile
   711                           
   712                           ;class4_sum.c: 113:     _delay((unsigned long)((100)*(6000000/4000.0)));
   713     0678  30C3               	movlw	195
   714     0679  00F1               	movwf	??_Lcd_Command+1
   715     067A  30CD               	movlw	205
   716     067B  00F0               	movwf	??_Lcd_Command
   717     067C                     u317:
   718     067C  0BF0               	decfsz	??_Lcd_Command,f
   719     067D  2E7C               	goto	u317
   720     067E  0BF1               	decfsz	??_Lcd_Command+1,f
   721     067F  2E7C               	goto	u317
   722     0680                     l61:
   723     0680  0008               	return
   724     0681                     __end_of_Lcd_Command:
   725                           
   726                           	psect	text3
   727     0725                     __ptext3:	
   728 ;; *************** function _LcdOutput *****************
   729 ;; Defined at:
   730 ;;		line 91 in file "class4_sum.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;  i               2   10[COMMON] unsigned int 
   733 ;; Auto vars:     Size  Location     Type
   734 ;;  j               1   13[COMMON] unsigned char 
   735 ;;  s               1   12[COMMON] unsigned char 
   736 ;; Return value:  Size  Location     Type
   737 ;;                  1    wreg      void 
   738 ;; Registers used:
   739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   740 ;; Tracked objects:
   741 ;;		On entry : 0/0
   742 ;;		On exit  : 0/0
   743 ;;		Unchanged: 0/0
   744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   745 ;;      Params:         2       0       0       0       0
   746 ;;      Locals:         2       0       0       0       0
   747 ;;      Temps:          0       0       0       0       0
   748 ;;      Totals:         4       0       0       0       0
   749 ;;Total ram usage:        4 bytes
   750 ;; Hardware stack levels used: 1
   751 ;; Hardware stack levels required when called: 1
   752 ;; This function calls:
   753 ;;		_Lcd_Data
   754 ;;		___bmul
   755 ;;		___lwdiv
   756 ;; This function is called by:
   757 ;;		_main
   758 ;; This function uses a non-reentrant model
   759 ;;
   760                           
   761     0725                     _LcdOutput:	
   762                           ;psect for function _LcdOutput
   763                           
   764     0725                     l848:	
   765                           ;incstack = 0
   766                           ; Regs used in _LcdOutput: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   767                           
   768                           
   769                           ;class4_sum.c: 92:     unsigned char s,j = 1;
   770     0725  3001               	movlw	1
   771     0726  00FD               	movwf	LcdOutput@j
   772     0727                     l850:
   773                           
   774                           ;class4_sum.c: 93:     m = i;
   775     0727  087B               	movf	LcdOutput@i+1,w
   776     0728  1283               	bcf	3,5	;RP0=0, select bank0
   777     0729  1303               	bcf	3,6	;RP1=0, select bank0
   778     072A  00A8               	movwf	_m+1
   779     072B  087A               	movf	LcdOutput@i,w
   780     072C  00A7               	movwf	_m
   781                           
   782                           ;class4_sum.c: 94:     while(m!=0){
   783     072D  2F62               	goto	l860
   784     072E                     l852:
   785                           
   786                           ;class4_sum.c: 95:         s= m-((m / 10)*10);
   787     072E  30F6               	movlw	246
   788     072F  00F7               	movwf	___bmul@multiplicand
   789     0730  0828               	movf	_m+1,w
   790     0731  00F3               	movwf	___lwdiv@dividend+1
   791     0732  0827               	movf	_m,w
   792     0733  00F2               	movwf	___lwdiv@dividend
   793     0734  300A               	movlw	10
   794     0735  00F0               	movwf	___lwdiv@divisor
   795     0736  3000               	movlw	0
   796     0737  00F1               	movwf	___lwdiv@divisor+1
   797     0738  120A  118A  2681  120A  118A  	fcall	___lwdiv
   798     073D  0870               	movf	?___lwdiv,w
   799     073E  120A  118A  265B  120A  118A  	fcall	___bmul
   800     0743  1283               	bcf	3,5	;RP0=0, select bank0
   801     0744  1303               	bcf	3,6	;RP1=0, select bank0
   802     0745  0727               	addwf	_m,w
   803     0746  00FC               	movwf	LcdOutput@s
   804     0747                     l854:
   805                           
   806                           ;class4_sum.c: 96:         k[j] = s;
   807     0747  087D               	movf	LcdOutput@j,w
   808     0748  3E20               	addlw	(low (_k| 0))& (0+255)
   809     0749  0084               	movwf	4
   810     074A  087C               	movf	LcdOutput@s,w
   811     074B  1383               	bcf	3,7	;select IRP bank0
   812     074C  0080               	movwf	0
   813     074D                     l856:
   814                           
   815                           ;class4_sum.c: 97:         j++;
   816     074D  3001               	movlw	1
   817     074E  07FD               	addwf	LcdOutput@j,f
   818     074F                     l858:
   819                           
   820                           ;class4_sum.c: 98:         m = m/10;
   821     074F  300A               	movlw	10
   822     0750  00F0               	movwf	___lwdiv@divisor
   823     0751  3000               	movlw	0
   824     0752  00F1               	movwf	___lwdiv@divisor+1
   825     0753  0828               	movf	_m+1,w
   826     0754  00F3               	movwf	___lwdiv@dividend+1
   827     0755  0827               	movf	_m,w
   828     0756  00F2               	movwf	___lwdiv@dividend
   829     0757  120A  118A  2681  120A  118A  	fcall	___lwdiv
   830     075C  0871               	movf	?___lwdiv+1,w
   831     075D  1283               	bcf	3,5	;RP0=0, select bank0
   832     075E  1303               	bcf	3,6	;RP1=0, select bank0
   833     075F  00A8               	movwf	_m+1
   834     0760  0870               	movf	?___lwdiv,w
   835     0761  00A7               	movwf	_m
   836     0762                     l860:
   837                           
   838                           ;class4_sum.c: 94:     while(m!=0){
   839     0762  0827               	movf	_m,w
   840     0763  0428               	iorwf	_m+1,w
   841     0764  1D03               	btfss	3,2
   842     0765  2F67               	goto	u221
   843     0766  2F68               	goto	u220
   844     0767                     u221:
   845     0767  2F2E               	goto	l852
   846     0768                     u220:
   847     0768                     l862:
   848                           
   849                           ;class4_sum.c: 100:     k[j] = '\0';
   850     0768  087D               	movf	LcdOutput@j,w
   851     0769  3E20               	addlw	(low (_k| 0))& (0+255)
   852     076A  0084               	movwf	4
   853     076B  1383               	bcf	3,7	;select IRP bank0
   854     076C  0180               	clrf	0
   855     076D                     l864:
   856                           
   857                           ;class4_sum.c: 101:     j=j-1;
   858     076D  087D               	movf	LcdOutput@j,w
   859     076E  3EFF               	addlw	255
   860     076F  00FD               	movwf	LcdOutput@j
   861                           
   862                           ;class4_sum.c: 102:     while(j!= 0) {
   863     0770  2F86               	goto	l872
   864     0771                     l866:
   865                           
   866                           ;class4_sum.c: 103:        n = 0x30 +k[j];
   867     0771  087D               	movf	LcdOutput@j,w
   868     0772  3E20               	addlw	(low (_k| 0))& (0+255)
   869     0773  0084               	movwf	4
   870     0774  1383               	bcf	3,7	;select IRP bank0
   871     0775  0800               	movf	0,w
   872     0776  3E30               	addlw	48
   873     0777  1283               	bcf	3,5	;RP0=0, select bank0
   874     0778  1303               	bcf	3,6	;RP1=0, select bank0
   875     0779  00A5               	movwf	_n
   876     077A  3000               	movlw	0
   877     077B  1803               	skipnc
   878     077C  3001               	movlw	1
   879     077D  00A6               	movwf	_n+1
   880     077E                     l868:
   881                           
   882                           ;class4_sum.c: 104:        Lcd_Data(n);
   883     077E  0825               	movf	_n,w
   884     077F  120A  118A  2649  120A  118A  	fcall	_Lcd_Data
   885     0784                     l870:
   886                           
   887                           ;class4_sum.c: 105:        j--;
   888     0784  3001               	movlw	1
   889     0785  02FD               	subwf	LcdOutput@j,f
   890     0786                     l872:
   891                           
   892                           ;class4_sum.c: 102:     while(j!= 0) {
   893     0786  087D               	movf	LcdOutput@j,w
   894     0787  1D03               	btfss	3,2
   895     0788  2F8A               	goto	u231
   896     0789  2F8B               	goto	u230
   897     078A                     u231:
   898     078A  2F71               	goto	l866
   899     078B                     u230:
   900     078B                     l58:
   901     078B  0008               	return
   902     078C                     __end_of_LcdOutput:
   903                           
   904                           	psect	text4
   905     0681                     __ptext4:	
   906 ;; *************** function ___lwdiv *****************
   907 ;; Defined at:
   908 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;  divisor         2    0[COMMON] unsigned int 
   911 ;;  dividend        2    2[COMMON] unsigned int 
   912 ;; Auto vars:     Size  Location     Type
   913 ;;  quotient        2    4[COMMON] unsigned int 
   914 ;;  counter         1    6[COMMON] unsigned char 
   915 ;; Return value:  Size  Location     Type
   916 ;;                  2    0[COMMON] unsigned int 
   917 ;; Registers used:
   918 ;;		wreg, status,2, status,0
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   924 ;;      Params:         4       0       0       0       0
   925 ;;      Locals:         3       0       0       0       0
   926 ;;      Temps:          0       0       0       0       0
   927 ;;      Totals:         7       0       0       0       0
   928 ;;Total ram usage:        7 bytes
   929 ;; Hardware stack levels used: 1
   930 ;; This function calls:
   931 ;;		Nothing
   932 ;; This function is called by:
   933 ;;		_LcdOutput
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937     0681                     ___lwdiv:	
   938                           ;psect for function ___lwdiv
   939                           
   940     0681                     l792:	
   941                           ;incstack = 0
   942                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
   943                           
   944     0681  01F4               	clrf	___lwdiv@quotient
   945     0682  01F5               	clrf	___lwdiv@quotient+1
   946     0683                     l794:
   947     0683  0870               	movf	___lwdiv@divisor,w
   948     0684  0471               	iorwf	___lwdiv@divisor+1,w
   949     0685  1903               	btfsc	3,2
   950     0686  2E88               	goto	u151
   951     0687  2E89               	goto	u150
   952     0688                     u151:
   953     0688  2EBE               	goto	l814
   954     0689                     u150:
   955     0689                     l796:
   956     0689  3001               	movlw	1
   957     068A  00F6               	movwf	___lwdiv@counter
   958     068B  2E95               	goto	l802
   959     068C                     l798:
   960     068C  3001               	movlw	1
   961     068D                     u165:
   962     068D  1003               	clrc
   963     068E  0DF0               	rlf	___lwdiv@divisor,f
   964     068F  0DF1               	rlf	___lwdiv@divisor+1,f
   965     0690  3EFF               	addlw	-1
   966     0691  1D03               	skipz
   967     0692  2E8D               	goto	u165
   968     0693                     l800:
   969     0693  3001               	movlw	1
   970     0694  07F6               	addwf	___lwdiv@counter,f
   971     0695                     l802:
   972     0695  1FF1               	btfss	___lwdiv@divisor+1,7
   973     0696  2E98               	goto	u171
   974     0697  2E99               	goto	u170
   975     0698                     u171:
   976     0698  2E8C               	goto	l798
   977     0699                     u170:
   978     0699                     l804:
   979     0699  3001               	movlw	1
   980     069A                     u185:
   981     069A  1003               	clrc
   982     069B  0DF4               	rlf	___lwdiv@quotient,f
   983     069C  0DF5               	rlf	___lwdiv@quotient+1,f
   984     069D  3EFF               	addlw	-1
   985     069E  1D03               	skipz
   986     069F  2E9A               	goto	u185
   987     06A0  0871               	movf	___lwdiv@divisor+1,w
   988     06A1  0273               	subwf	___lwdiv@dividend+1,w
   989     06A2  1D03               	skipz
   990     06A3  2EA6               	goto	u195
   991     06A4  0870               	movf	___lwdiv@divisor,w
   992     06A5  0272               	subwf	___lwdiv@dividend,w
   993     06A6                     u195:
   994     06A6  1C03               	skipc
   995     06A7  2EA9               	goto	u191
   996     06A8  2EAA               	goto	u190
   997     06A9                     u191:
   998     06A9  2EB1               	goto	l810
   999     06AA                     u190:
  1000     06AA                     l806:
  1001     06AA  0870               	movf	___lwdiv@divisor,w
  1002     06AB  02F2               	subwf	___lwdiv@dividend,f
  1003     06AC  0871               	movf	___lwdiv@divisor+1,w
  1004     06AD  1C03               	skipc
  1005     06AE  03F3               	decf	___lwdiv@dividend+1,f
  1006     06AF  02F3               	subwf	___lwdiv@dividend+1,f
  1007     06B0                     l808:
  1008     06B0  1474               	bsf	___lwdiv@quotient,0
  1009     06B1                     l810:
  1010     06B1  3001               	movlw	1
  1011     06B2                     u205:
  1012     06B2  1003               	clrc
  1013     06B3  0CF1               	rrf	___lwdiv@divisor+1,f
  1014     06B4  0CF0               	rrf	___lwdiv@divisor,f
  1015     06B5  3EFF               	addlw	-1
  1016     06B6  1D03               	skipz
  1017     06B7  2EB2               	goto	u205
  1018     06B8                     l812:
  1019     06B8  3001               	movlw	1
  1020     06B9  02F6               	subwf	___lwdiv@counter,f
  1021     06BA  1D03               	btfss	3,2
  1022     06BB  2EBD               	goto	u211
  1023     06BC  2EBE               	goto	u210
  1024     06BD                     u211:
  1025     06BD  2E99               	goto	l804
  1026     06BE                     u210:
  1027     06BE                     l814:
  1028     06BE  0875               	movf	___lwdiv@quotient+1,w
  1029     06BF  00F1               	movwf	?___lwdiv+1
  1030     06C0  0874               	movf	___lwdiv@quotient,w
  1031     06C1  00F0               	movwf	?___lwdiv
  1032     06C2                     l436:
  1033     06C2  0008               	return
  1034     06C3                     __end_of___lwdiv:
  1035                           
  1036                           	psect	text5
  1037     065B                     __ptext5:	
  1038 ;; *************** function ___bmul *****************
  1039 ;; Defined at:
  1040 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul8.c"
  1041 ;; Parameters:    Size  Location     Type
  1042 ;;  multiplier      1    wreg     unsigned char 
  1043 ;;  multiplicand    1    7[COMMON] unsigned char 
  1044 ;; Auto vars:     Size  Location     Type
  1045 ;;  multiplier      1    9[COMMON] unsigned char 
  1046 ;;  product         1    8[COMMON] unsigned char 
  1047 ;; Return value:  Size  Location     Type
  1048 ;;                  1    wreg      unsigned char 
  1049 ;; Registers used:
  1050 ;;		wreg, status,2, status,0
  1051 ;; Tracked objects:
  1052 ;;		On entry : 0/0
  1053 ;;		On exit  : 0/0
  1054 ;;		Unchanged: 0/0
  1055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1056 ;;      Params:         1       0       0       0       0
  1057 ;;      Locals:         2       0       0       0       0
  1058 ;;      Temps:          0       0       0       0       0
  1059 ;;      Totals:         3       0       0       0       0
  1060 ;;Total ram usage:        3 bytes
  1061 ;; Hardware stack levels used: 1
  1062 ;; This function calls:
  1063 ;;		Nothing
  1064 ;; This function is called by:
  1065 ;;		_LcdOutput
  1066 ;; This function uses a non-reentrant model
  1067 ;;
  1068                           
  1069     065B                     ___bmul:	
  1070                           ;psect for function ___bmul
  1071                           
  1072                           
  1073                           ;incstack = 0
  1074                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1075                           ;___bmul@multiplier stored from wreg
  1076     065B  00F9               	movwf	___bmul@multiplier
  1077     065C                     l778:
  1078     065C  01F8               	clrf	___bmul@product
  1079     065D                     l780:
  1080     065D  1C79               	btfss	___bmul@multiplier,0
  1081     065E  2E60               	goto	u131
  1082     065F  2E61               	goto	u130
  1083     0660                     u131:
  1084     0660  2E63               	goto	l784
  1085     0661                     u130:
  1086     0661                     l782:
  1087     0661  0877               	movf	___bmul@multiplicand,w
  1088     0662  07F8               	addwf	___bmul@product,f
  1089     0663                     l784:
  1090     0663  1003               	clrc
  1091     0664  0DF7               	rlf	___bmul@multiplicand,f
  1092     0665                     l786:
  1093     0665  1003               	clrc
  1094     0666  0CF9               	rrf	___bmul@multiplier,f
  1095     0667  0879               	movf	___bmul@multiplier,w
  1096     0668  1D03               	btfss	3,2
  1097     0669  2E6B               	goto	u141
  1098     066A  2E6C               	goto	u140
  1099     066B                     u141:
  1100     066B  2E5D               	goto	l780
  1101     066C                     u140:
  1102     066C                     l788:
  1103     066C  0878               	movf	___bmul@product,w
  1104     066D                     l182:
  1105     066D  0008               	return
  1106     066E                     __end_of___bmul:
  1107                           
  1108                           	psect	text6
  1109     0649                     __ptext6:	
  1110 ;; *************** function _Lcd_Data *****************
  1111 ;; Defined at:
  1112 ;;		line 115 in file "class4_sum.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;  data            1    wreg     unsigned char 
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;  data            1    2[COMMON] unsigned char 
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  1    wreg      void 
  1119 ;; Registers used:
  1120 ;;		wreg, status,2, status,0
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1126 ;;      Params:         0       0       0       0       0
  1127 ;;      Locals:         1       0       0       0       0
  1128 ;;      Temps:          2       0       0       0       0
  1129 ;;      Totals:         3       0       0       0       0
  1130 ;;Total ram usage:        3 bytes
  1131 ;; Hardware stack levels used: 1
  1132 ;; This function calls:
  1133 ;;		Nothing
  1134 ;; This function is called by:
  1135 ;;		_main
  1136 ;;		_LcdOutput
  1137 ;; This function uses a non-reentrant model
  1138 ;;
  1139                           
  1140     0649                     _Lcd_Data:	
  1141                           ;psect for function _Lcd_Data
  1142                           
  1143                           
  1144                           ;incstack = 0
  1145                           ; Regs used in _Lcd_Data: [wreg+status,2+status,0]
  1146                           ;Lcd_Data@data stored from wreg
  1147     0649  00F2               	movwf	Lcd_Data@data
  1148     064A                     l768:
  1149                           
  1150                           ;class4_sum.c: 116:     PORTC |= 0x08;
  1151     064A  1283               	bcf	3,5	;RP0=0, select bank0
  1152     064B  1303               	bcf	3,6	;RP1=0, select bank0
  1153     064C  1587               	bsf	7,3	;volatile
  1154     064D                     l770:
  1155                           
  1156                           ;class4_sum.c: 117:     PORTD = data;
  1157     064D  0872               	movf	Lcd_Data@data,w
  1158     064E  0088               	movwf	8	;volatile
  1159     064F                     l772:
  1160                           
  1161                           ;class4_sum.c: 118:     PORTC |= 0x01;
  1162     064F  1407               	bsf	7,0	;volatile
  1163     0650                     l774:
  1164                           
  1165                           ;class4_sum.c: 119:     PORTC &= ~0x01;
  1166     0650  30FE               	movlw	254
  1167     0651  0587               	andwf	7,f	;volatile
  1168     0652                     l776:
  1169                           
  1170                           ;class4_sum.c: 120:     _delay((unsigned long)((100)*(6000000/4000.0)));
  1171     0652  30C3               	movlw	195
  1172     0653  00F1               	movwf	??_Lcd_Data+1
  1173     0654  30CD               	movlw	205
  1174     0655  00F0               	movwf	??_Lcd_Data
  1175     0656                     u327:
  1176     0656  0BF0               	decfsz	??_Lcd_Data,f
  1177     0657  2E56               	goto	u327
  1178     0658  0BF1               	decfsz	??_Lcd_Data+1,f
  1179     0659  2E56               	goto	u327
  1180     065A                     l64:
  1181     065A  0008               	return
  1182     065B                     __end_of_Lcd_Data:
  1183     0002                     ___latbits      equ	2
  1184     007E                     btemp           set	126	;btemp
  1185     007E                     wtemp0          set	126
  1186                           
  1187                           	psect	config
  1188                           
  1189                           ;Config register CONFIG @ 0x2007
  1190                           ;	Oscillator Selection bits
  1191                           ;	FOSC = EXTRC, RC oscillator
  1192                           ;	Watchdog Timer Enable bit
  1193                           ;	WDTE = OFF, WDT disabled
  1194                           ;	Power-up Timer Enable bit
  1195                           ;	PWRTE = OFF, PWRT disabled
  1196                           ;	Brown-out Reset Enable bit
  1197                           ;	BOREN = OFF, BOR disabled
  1198                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1199                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1200                           ;	Data EEPROM Memory Code Protection bit
  1201                           ;	CPD = OFF, Data EEPROM code protection off
  1202                           ;	Flash Program Memory Write Enable bits
  1203                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1204                           ;	In-Circuit Debugger Mode bit
  1205                           ;	DEBUG = 0x1, unprogrammed default
  1206                           ;	Flash Program Memory Code Protection bit
  1207                           ;	CP = OFF, Code protection off
  1208     2007                     	org	8199
  1209     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0      20
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_LcdOutput
    _Lcd_Init->_Lcd_Command
    _LcdOutput->___bmul
    ___bmul->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     552
                          _LcdOutput
                        _Lcd_Command
                           _Lcd_Data
                           _Lcd_Init
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      29
                                              3 COMMON     2     2      0
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (2) _Lcd_Command                                          3     3      0      29
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LcdOutput                                            4     2      2     465
                                             10 COMMON     4     2      2
                           _Lcd_Data
                             ___bmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     166
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     108
                                              7 COMMON     3     2      1
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Data                                             3     3      0      29
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcdOutput
     _Lcd_Data
     ___bmul
       ___lwdiv (ARG)
     ___lwdiv
   _Lcd_Command
   _Lcd_Data
   _Lcd_Init
     _Lcd_Command

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     14      14    100.0%
BANK0               80      0      20     25.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      34      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Mar 26 12:06:57 2025

                      _j 0033                        _k 0020                        _m 0027  
                      _n 0025           ___bmul@product 0078                       l43 0721  
                     l44 0721                       l61 0680                       l64 065A  
                     l49 07F2                       l58 078B                       fsr 0004  
                    l182 066D                      l436 06C2                      l800 0693  
                    l810 06B1                      l802 0695                      l812 06B8  
                    l804 0699                      l820 0790                      l900 0718  
                    l806 06AA                      l814 06BE                      l830 07B2  
                    l822 0796                      l808 06B0                      l760 066F  
                    l840 07D6                      l832 07BA                      l824 079E  
                    l770 064D                      l850 0727                      l762 0673  
                    l842 07DC                      l834 07C0                      l826 07A4  
                    l818 078C                      l772 064F                      l780 065D  
                    l852 072E                      l860 0762                      l764 0675  
                    l844 07E4                      l836 07C8                      l828 07AC  
                    l774 0650                      l782 0661                      l870 0784  
                    l862 0768                      l854 0747                      l766 0676  
                    l846 07EA                      l838 07CE                      l776 0652  
                    l768 064A                      l784 0663                      l792 0681  
                    l872 0786                      l864 076D                      l856 074D  
                    l848 0725                      l880 06D2                      l786 0665  
                    l778 065C                      l794 0683                      l866 0771  
                    l858 074F                      l890 06F1                      l882 06D4  
                    l874 06C3                      l788 066C                      l796 0689  
                    l868 077E                      l892 0700                      l884 06DC  
                    l876 06C8                      l798 068C                      l894 0706  
                    l886 06E5                      l878 06CE                      l896 070C  
                    l888 06EB                      l898 0712                      u130 0661  
                    u210 06BE                      u131 0660                      u211 06BD  
                    u140 066C                      u220 0768                      u141 066B  
                    u205 06B2                      u221 0767                      u150 0689  
                    u230 078B                      u151 0688                      u231 078A  
                    u170 0699                      u171 0698                      u307 07EE  
                    u165 068D                      u317 067C                      u190 06AA  
                    u327 0656                      u191 06A9                      u247 079A  
                    u185 069A                      u257 07A8                      u195 06A6  
                    u267 07B6                      u277 07C4                      u287 07D2  
                    u297 07E0                      fsr0 0004                      _sum 002B  
                    indf 0000      __end_of_Lcd_Command 0681                     _Plus 0031  
                   _main 06C3                     _num1 002F                     _num2 002D  
                   btemp 007E                     start 0000        ___bmul@multiplier 0079  
                  ?_main 0070          __end_of___lwdiv 06C3                    _PORTC 0007  
                  _PORTD 0008                    _TRISC 0087                    _TRISD 0088  
                  _Equal 0032                    status 0003                    wtemp0 007E  
       __end_of_Lcd_Data 065B         __end_of_Lcd_Init 07F3          __initialization 07F3  
           __end_of_main 0725              _Lcd_Command 066E                   ??_main 007E  
                 ___bmul 065B                ??___lwdiv 0074  __end_of__initialization 07FC  
    ___bmul@multiplicand 0077        __end_of_LcdOutput 078C           __pcstackCOMMON 0070  
              ?_Lcd_Data 0070                ?_Lcd_Init 0070               __pbssBANK0 0020  
             _delaycount 0029               __pmaintext 06C3                  ?___bmul 0077  
             ??_Lcd_Data 0070               ??_Lcd_Init 0073                  ___lwdiv 0681  
           ?_Lcd_Command 0070                  __ptext1 078C                  __ptext2 066E  
                __ptext3 0725                  __ptext4 0681                  __ptext5 065B  
                __ptext6 0649                  clrloop0 0642     end_of_initialization 07FC  
         __end_of___bmul 066E                _LcdOutput 0725      start_initialization 07F3  
               ??___bmul 0078               ?_LcdOutput 007A                ___latbits 0002  
       ___lwdiv@dividend 0072                 ?___lwdiv 0070         ___lwdiv@quotient 0074  
           Lcd_Data@data 0072                clear_ram0 0641              ??_LcdOutput 007C  
               _Lcd_Data 0649                 _Lcd_Init 078C          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0076            ??_Lcd_Command 0070           Lcd_Command@cmd 0072  
             LcdOutput@i 007A               LcdOutput@j 007D               LcdOutput@s 007C  
