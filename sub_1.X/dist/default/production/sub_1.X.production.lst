

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Sat Mar 22 09:45:23 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=1
    14                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=1
    15                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18     0000                     
    19                           ; Generated 12/10/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0004                     fsr             equ	4
    54     0004                     fsr0            equ	4
    55     0000                     indf            equ	0
    56     0000                     indf0           equ	0
    57     0002                     pc              equ	2
    58     0002                     pcl             equ	2
    59     000A                     pclath          equ	10
    60     0003                     status          equ	3
    61     0000                     INDF            equ	0	;# 
    62     0001                     TMR0            equ	1	;# 
    63     0002                     PCL             equ	2	;# 
    64     0003                     STATUS          equ	3	;# 
    65     0004                     FSR             equ	4	;# 
    66     0005                     PORTA           equ	5	;# 
    67     0006                     PORTB           equ	6	;# 
    68     0007                     PORTC           equ	7	;# 
    69     0008                     PORTD           equ	8	;# 
    70     0009                     PORTE           equ	9	;# 
    71     000A                     PCLATH          equ	10	;# 
    72     000B                     INTCON          equ	11	;# 
    73     000C                     PIR1            equ	12	;# 
    74     000D                     PIR2            equ	13	;# 
    75     000E                     TMR1            equ	14	;# 
    76     000E                     TMR1L           equ	14	;# 
    77     000F                     TMR1H           equ	15	;# 
    78     0010                     T1CON           equ	16	;# 
    79     0011                     TMR2            equ	17	;# 
    80     0012                     T2CON           equ	18	;# 
    81     0013                     SSPBUF          equ	19	;# 
    82     0014                     SSPCON          equ	20	;# 
    83     0015                     CCPR1           equ	21	;# 
    84     0015                     CCPR1L          equ	21	;# 
    85     0016                     CCPR1H          equ	22	;# 
    86     0017                     CCP1CON         equ	23	;# 
    87     0018                     RCSTA           equ	24	;# 
    88     0019                     TXREG           equ	25	;# 
    89     001A                     RCREG           equ	26	;# 
    90     001B                     CCPR2           equ	27	;# 
    91     001B                     CCPR2L          equ	27	;# 
    92     001C                     CCPR2H          equ	28	;# 
    93     001D                     CCP2CON         equ	29	;# 
    94     001E                     ADRESH          equ	30	;# 
    95     001F                     ADCON0          equ	31	;# 
    96     0081                     OPTION_REG      equ	129	;# 
    97     0085                     TRISA           equ	133	;# 
    98     0086                     TRISB           equ	134	;# 
    99     0087                     TRISC           equ	135	;# 
   100     0088                     TRISD           equ	136	;# 
   101     0089                     TRISE           equ	137	;# 
   102     008C                     PIE1            equ	140	;# 
   103     008D                     PIE2            equ	141	;# 
   104     008E                     PCON            equ	142	;# 
   105     0091                     SSPCON2         equ	145	;# 
   106     0092                     PR2             equ	146	;# 
   107     0093                     SSPADD          equ	147	;# 
   108     0094                     SSPSTAT         equ	148	;# 
   109     0098                     TXSTA           equ	152	;# 
   110     0099                     SPBRG           equ	153	;# 
   111     009C                     CMCON           equ	156	;# 
   112     009D                     CVRCON          equ	157	;# 
   113     009E                     ADRESL          equ	158	;# 
   114     009F                     ADCON1          equ	159	;# 
   115     010C                     EEDATA          equ	268	;# 
   116     010D                     EEADR           equ	269	;# 
   117     010E                     EEDATH          equ	270	;# 
   118     010F                     EEADRH          equ	271	;# 
   119     018C                     EECON1          equ	396	;# 
   120     018D                     EECON2          equ	397	;# 
   121     0000                     INDF            equ	0	;# 
   122     0001                     TMR0            equ	1	;# 
   123     0002                     PCL             equ	2	;# 
   124     0003                     STATUS          equ	3	;# 
   125     0004                     FSR             equ	4	;# 
   126     0005                     PORTA           equ	5	;# 
   127     0006                     PORTB           equ	6	;# 
   128     0007                     PORTC           equ	7	;# 
   129     0008                     PORTD           equ	8	;# 
   130     0009                     PORTE           equ	9	;# 
   131     000A                     PCLATH          equ	10	;# 
   132     000B                     INTCON          equ	11	;# 
   133     000C                     PIR1            equ	12	;# 
   134     000D                     PIR2            equ	13	;# 
   135     000E                     TMR1            equ	14	;# 
   136     000E                     TMR1L           equ	14	;# 
   137     000F                     TMR1H           equ	15	;# 
   138     0010                     T1CON           equ	16	;# 
   139     0011                     TMR2            equ	17	;# 
   140     0012                     T2CON           equ	18	;# 
   141     0013                     SSPBUF          equ	19	;# 
   142     0014                     SSPCON          equ	20	;# 
   143     0015                     CCPR1           equ	21	;# 
   144     0015                     CCPR1L          equ	21	;# 
   145     0016                     CCPR1H          equ	22	;# 
   146     0017                     CCP1CON         equ	23	;# 
   147     0018                     RCSTA           equ	24	;# 
   148     0019                     TXREG           equ	25	;# 
   149     001A                     RCREG           equ	26	;# 
   150     001B                     CCPR2           equ	27	;# 
   151     001B                     CCPR2L          equ	27	;# 
   152     001C                     CCPR2H          equ	28	;# 
   153     001D                     CCP2CON         equ	29	;# 
   154     001E                     ADRESH          equ	30	;# 
   155     001F                     ADCON0          equ	31	;# 
   156     0081                     OPTION_REG      equ	129	;# 
   157     0085                     TRISA           equ	133	;# 
   158     0086                     TRISB           equ	134	;# 
   159     0087                     TRISC           equ	135	;# 
   160     0088                     TRISD           equ	136	;# 
   161     0089                     TRISE           equ	137	;# 
   162     008C                     PIE1            equ	140	;# 
   163     008D                     PIE2            equ	141	;# 
   164     008E                     PCON            equ	142	;# 
   165     0091                     SSPCON2         equ	145	;# 
   166     0092                     PR2             equ	146	;# 
   167     0093                     SSPADD          equ	147	;# 
   168     0094                     SSPSTAT         equ	148	;# 
   169     0098                     TXSTA           equ	152	;# 
   170     0099                     SPBRG           equ	153	;# 
   171     009C                     CMCON           equ	156	;# 
   172     009D                     CVRCON          equ	157	;# 
   173     009E                     ADRESL          equ	158	;# 
   174     009F                     ADCON1          equ	159	;# 
   175     010C                     EEDATA          equ	268	;# 
   176     010D                     EEADR           equ	269	;# 
   177     010E                     EEDATH          equ	270	;# 
   178     010F                     EEADRH          equ	271	;# 
   179     018C                     EECON1          equ	396	;# 
   180     018D                     EECON2          equ	397	;# 
   181     0008                     _PORTD          set	8
   182     0007                     _PORTC          set	7
   183     0088                     _TRISD          set	136
   184     0087                     _TRISC          set	135
   185                           
   186                           	psect	cinit
   187     07F3                     start_initialization:	
   188                           ; #config settings
   189                           
   190     07F3                     __initialization:
   191                           
   192                           ; Clear objects allocated to COMMON
   193     07F3  01FA               	clrf	__pbssCOMMON& (0+127)
   194     07F4  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   195     07F5  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
   196                           
   197                           ; Clear objects allocated to BANK0
   198     07F6  1283               	bcf	3,5	;RP0=0, select bank0
   199     07F7  1303               	bcf	3,6	;RP1=0, select bank0
   200     07F8  01A6               	clrf	__pbssBANK0& (0+127)
   201     07F9  01A7               	clrf	(__pbssBANK0+1)& (0+127)
   202     07FA  01A8               	clrf	(__pbssBANK0+2)& (0+127)
   203     07FB  01A9               	clrf	(__pbssBANK0+3)& (0+127)
   204     07FC                     end_of_initialization:	
   205                           ;End of C runtime variable initialization code
   206                           
   207     07FC                     __end_of__initialization:
   208     07FC  0183               	clrf	3
   209     07FD  120A  118A  2F8A   	ljmp	_main	;jump to C main() function
   210                           
   211                           	psect	bssCOMMON
   212     007A                     __pbssCOMMON:
   213     007A                     _sub:
   214     007A                     	ds	2
   215     007C                     _Equal:
   216     007C                     	ds	1
   217                           
   218                           	psect	bssBANK0
   219     0026                     __pbssBANK0:
   220     0026                     _num2:
   221     0026                     	ds	2
   222     0028                     _num1:
   223     0028                     	ds	2
   224                           
   225                           	psect	cstackCOMMON
   226     0070                     __pcstackCOMMON:
   227     0070                     ?_Lcd_Init:
   228     0070                     ?_Lcd_Command:	
   229                           ; 1 bytes @ 0x0
   230                           
   231     0070                     ?_Lcd_Data:	
   232                           ; 1 bytes @ 0x0
   233                           
   234     0070                     ?_main:	
   235                           ; 1 bytes @ 0x0
   236                           
   237     0070                     ?___awdiv:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0070                     ?___awmod:	
   241                           ; 2 bytes @ 0x0
   242                           
   243     0070                     ___awdiv@divisor:	
   244                           ; 2 bytes @ 0x0
   245                           
   246     0070                     ___awmod@divisor:	
   247                           ; 2 bytes @ 0x0
   248                           
   249     0070                     ??_Lcd_Command:	
   250                           ; 2 bytes @ 0x0
   251                           
   252     0070                     ??_Lcd_Data:	
   253                           ; 1 bytes @ 0x0
   254                           
   255                           
   256                           ; 1 bytes @ 0x0
   257     0070                     	ds	2
   258     0072                     Lcd_Command@cmd:
   259     0072                     Lcd_Data@data:	
   260                           ; 1 bytes @ 0x2
   261                           
   262     0072                     ___awdiv@dividend:	
   263                           ; 1 bytes @ 0x2
   264                           
   265     0072                     ___awmod@dividend:	
   266                           ; 2 bytes @ 0x2
   267                           
   268                           
   269                           ; 2 bytes @ 0x2
   270     0072                     	ds	1
   271     0073                     ??_Lcd_Init:
   272                           
   273                           ; 1 bytes @ 0x3
   274     0073                     	ds	1
   275     0074                     ___awdiv@counter:
   276     0074                     ___awmod@counter:	
   277                           ; 1 bytes @ 0x4
   278                           
   279     0074                     ??___awdiv:	
   280                           ; 1 bytes @ 0x4
   281                           
   282     0074                     ??___awmod:	
   283                           ; 1 bytes @ 0x4
   284                           
   285                           
   286                           ; 1 bytes @ 0x4
   287     0074                     	ds	1
   288     0075                     ___awdiv@sign:
   289     0075                     ___awmod@sign:	
   290                           ; 1 bytes @ 0x5
   291                           
   292                           
   293                           ; 1 bytes @ 0x5
   294     0075                     	ds	1
   295     0076                     ___awdiv@quotient:
   296                           
   297                           ; 2 bytes @ 0x6
   298     0076                     	ds	2
   299     0078                     ?_LcdOutput:
   300     0078                     LcdOutput@num:	
   301                           ; 1 bytes @ 0x8
   302                           
   303                           
   304                           ; 2 bytes @ 0x8
   305     0078                     	ds	2
   306     007A                     ??_LcdOutput:
   307     007A                     ??_main:	
   308                           ; 1 bytes @ 0xA
   309                           
   310                           
   311                           	psect	cstackBANK0
   312     0020                     __pcstackBANK0:	
   313                           ; 1 bytes @ 0xA
   314                           
   315     0020                     LcdOutput@digits:
   316                           
   317                           ; 5 bytes @ 0x0
   318     0020                     	ds	5
   319     0025                     LcdOutput@i:
   320                           
   321                           ; 1 bytes @ 0x5
   322     0025                     	ds	1
   323                           
   324                           	psect	maintext
   325     078A                     __pmaintext:	
   326 ;;
   327 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   328 ;;
   329 ;; *************** function _main *****************
   330 ;; Defined at:
   331 ;;		line 29 in file "newmain.c"
   332 ;; Parameters:    Size  Location     Type
   333 ;;		None
   334 ;; Auto vars:     Size  Location     Type
   335 ;;		None
   336 ;; Return value:  Size  Location     Type
   337 ;;                  1    wreg      void 
   338 ;; Registers used:
   339 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   340 ;; Tracked objects:
   341 ;;		On entry : B00/0
   342 ;;		On exit  : 0/0
   343 ;;		Unchanged: 0/0
   344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   345 ;;      Params:         0       0       0       0       0
   346 ;;      Locals:         0       0       0       0       0
   347 ;;      Temps:          0       0       0       0       0
   348 ;;      Totals:         0       0       0       0       0
   349 ;;Total ram usage:        0 bytes
   350 ;; Hardware stack levels required when called: 2
   351 ;; This function calls:
   352 ;;		_LcdOutput
   353 ;;		_Lcd_Command
   354 ;;		_Lcd_Data
   355 ;;		_Lcd_Init
   356 ;; This function is called by:
   357 ;;		Startup code after reset
   358 ;; This function uses a non-reentrant model
   359 ;;
   360                           
   361     078A                     _main:	
   362                           ;psect for function _main
   363                           
   364     078A                     l937:	
   365                           ;incstack = 0
   366                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   367                           
   368                           
   369                           ;newmain.c: 30:     Lcd_Init();
   370     078A  120A  118A  2723  120A  118A  	fcall	_Lcd_Init
   371     078F                     l939:
   372                           
   373                           ;newmain.c: 32:     num1 = 100;
   374     078F  3064               	movlw	100
   375     0790  1283               	bcf	3,5	;RP0=0, select bank0
   376     0791  1303               	bcf	3,6	;RP1=0, select bank0
   377     0792  00A8               	movwf	_num1
   378     0793  3000               	movlw	0
   379     0794  00A9               	movwf	_num1+1
   380     0795                     l941:
   381                           
   382                           ;newmain.c: 33:     num2 = 200;
   383     0795  30C8               	movlw	200
   384     0796  00A6               	movwf	_num2
   385     0797  3000               	movlw	0
   386     0798  00A7               	movwf	_num2+1
   387     0799                     l943:
   388                           
   389                           ;newmain.c: 34:     Equal = '=';
   390     0799  303D               	movlw	61
   391     079A  00FC               	movwf	_Equal
   392                           
   393                           ;newmain.c: 37:     Lcd_Command(0x80);
   394     079B  3080               	movlw	128
   395     079C  120A  118A  2602  120A  118A  	fcall	_Lcd_Command
   396     07A1                     l945:
   397                           
   398                           ;newmain.c: 38:     LcdOutput(num1);
   399     07A1  3064               	movlw	100
   400     07A2  00F8               	movwf	LcdOutput@num
   401     07A3  3000               	movlw	0
   402     07A4  00F9               	movwf	LcdOutput@num+1
   403     07A5  120A  118A  2615  120A  118A  	fcall	_LcdOutput
   404     07AA                     l947:
   405                           
   406                           ;newmain.c: 41:     Lcd_Command(0x83);
   407     07AA  3083               	movlw	131
   408     07AB  120A  118A  2602  120A  118A  	fcall	_Lcd_Command
   409     07B0                     l949:
   410                           
   411                           ;newmain.c: 42:     Lcd_Data('-');
   412     07B0  302D               	movlw	45
   413     07B1  120A  118A  25F0  120A  118A  	fcall	_Lcd_Data
   414     07B6                     l951:
   415                           
   416                           ;newmain.c: 45:     Lcd_Command(0x84);
   417     07B6  3084               	movlw	132
   418     07B7  120A  118A  2602  120A  118A  	fcall	_Lcd_Command
   419                           
   420                           ;newmain.c: 46:     LcdOutput(num2);
   421     07BC  30C8               	movlw	200
   422     07BD  00F8               	movwf	LcdOutput@num
   423     07BE  3000               	movlw	0
   424     07BF  00F9               	movwf	LcdOutput@num+1
   425     07C0  120A  118A  2615  120A  118A  	fcall	_LcdOutput
   426     07C5                     l953:
   427                           
   428                           ;newmain.c: 49:     Lcd_Command(0x87);
   429     07C5  3087               	movlw	135
   430     07C6  120A  118A  2602  120A  118A  	fcall	_Lcd_Command
   431     07CB                     l955:
   432                           
   433                           ;newmain.c: 50:     Lcd_Data(Equal);
   434     07CB  303D               	movlw	61
   435     07CC  120A  118A  25F0  120A  118A  	fcall	_Lcd_Data
   436     07D1                     l957:
   437                           
   438                           ;newmain.c: 53:     sub = num1 - num2;
   439     07D1  309C               	movlw	156
   440     07D2  00FA               	movwf	_sub
   441     07D3  30FF               	movlw	255
   442     07D4  00FB               	movwf	_sub+1
   443     07D5                     l959:
   444                           
   445                           ;newmain.c: 56:     Lcd_Command(0x88);
   446     07D5  3088               	movlw	136
   447     07D6  120A  118A  2602  120A  118A  	fcall	_Lcd_Command
   448     07DB                     l961:
   449     07DB                     l963:	
   450                           ;newmain.c: 57:     if (sub < 0) {
   451                           
   452                           
   453                           ;newmain.c: 58:         Lcd_Data('-');
   454     07DB  302D               	movlw	45
   455     07DC  120A  118A  25F0  120A  118A  	fcall	_Lcd_Data
   456     07E1                     l965:
   457                           
   458                           ;newmain.c: 59:         sub = -sub;
   459     07E1  09FA               	comf	_sub,f
   460     07E2  09FB               	comf	_sub+1,f
   461     07E3  0AFA               	incf	_sub,f
   462     07E4  1903               	skipnz
   463     07E5  0AFB               	incf	_sub+1,f
   464     07E6                     l969:	
   465                           ;newmain.c: 60:     } else {
   466                           
   467                           
   468                           ;newmain.c: 65:     LcdOutput(sub);
   469     07E6  087B               	movf	_sub+1,w
   470     07E7  00F9               	movwf	LcdOutput@num+1
   471     07E8  087A               	movf	_sub,w
   472     07E9  00F8               	movwf	LcdOutput@num
   473     07EA  120A  118A  2615  120A  118A  	fcall	_LcdOutput
   474     07EF                     l33:	
   475                           ;newmain.c: 67:     while(1);
   476                           
   477     07EF                     l34:
   478     07EF  2FEF               	goto	l33
   479     07F0  120A  118A  2800   	ljmp	start
   480     07F3                     __end_of_main:
   481                           
   482                           	psect	text1
   483     0723                     __ptext1:	
   484 ;; *************** function _Lcd_Init *****************
   485 ;; Defined at:
   486 ;;		line 70 in file "newmain.c"
   487 ;; Parameters:    Size  Location     Type
   488 ;;		None
   489 ;; Auto vars:     Size  Location     Type
   490 ;;		None
   491 ;; Return value:  Size  Location     Type
   492 ;;                  1    wreg      void 
   493 ;; Registers used:
   494 ;;		wreg, status,2, status,0, pclath, cstack
   495 ;; Tracked objects:
   496 ;;		On entry : 0/0
   497 ;;		On exit  : 0/0
   498 ;;		Unchanged: 0/0
   499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   500 ;;      Params:         0       0       0       0       0
   501 ;;      Locals:         0       0       0       0       0
   502 ;;      Temps:          2       0       0       0       0
   503 ;;      Totals:         2       0       0       0       0
   504 ;;Total ram usage:        2 bytes
   505 ;; Hardware stack levels used: 1
   506 ;; Hardware stack levels required when called: 1
   507 ;; This function calls:
   508 ;;		_Lcd_Command
   509 ;; This function is called by:
   510 ;;		_main
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514     0723                     _Lcd_Init:	
   515                           ;psect for function _Lcd_Init
   516                           
   517     0723                     l885:	
   518                           ;incstack = 0
   519                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
   520                           
   521                           
   522                           ;newmain.c: 71:     TRISC = 0x00;
   523     0723  1683               	bsf	3,5	;RP0=1, select bank1
   524     0724  1303               	bcf	3,6	;RP1=0, select bank1
   525     0725  0187               	clrf	7	;volatile
   526                           
   527                           ;newmain.c: 72:     TRISD = 0x00;
   528     0726  0188               	clrf	8	;volatile
   529     0727                     l887:
   530                           
   531                           ;newmain.c: 75:     Lcd_Command(0x30);
   532     0727  3030               	movlw	48
   533     0728  120A  118A  2602  120A  118A  	fcall	_Lcd_Command
   534     072D                     l889:
   535                           
   536                           ;newmain.c: 76:     _delay((unsigned long)((100)*(6000000/4000.0)));
   537     072D  30C3               	movlw	195
   538     072E  00F4               	movwf	??_Lcd_Init+1
   539     072F  30CD               	movlw	205
   540     0730  00F3               	movwf	??_Lcd_Init
   541     0731                     u457:
   542     0731  0BF3               	decfsz	??_Lcd_Init,f
   543     0732  2F31               	goto	u457
   544     0733  0BF4               	decfsz	??_Lcd_Init+1,f
   545     0734  2F31               	goto	u457
   546     0735                     l891:
   547                           
   548                           ;newmain.c: 77:     Lcd_Command(0x30);
   549     0735  3030               	movlw	48
   550     0736  120A  118A  2602  120A  118A  	fcall	_Lcd_Command
   551     073B                     l893:
   552                           
   553                           ;newmain.c: 78:     _delay((unsigned long)((100)*(6000000/4000.0)));
   554     073B  30C3               	movlw	195
   555     073C  00F4               	movwf	??_Lcd_Init+1
   556     073D  30CD               	movlw	205
   557     073E  00F3               	movwf	??_Lcd_Init
   558     073F                     u467:
   559     073F  0BF3               	decfsz	??_Lcd_Init,f
   560     0740  2F3F               	goto	u467
   561     0741  0BF4               	decfsz	??_Lcd_Init+1,f
   562     0742  2F3F               	goto	u467
   563     0743                     l895:
   564                           
   565                           ;newmain.c: 79:     Lcd_Command(0x30);
   566     0743  3030               	movlw	48
   567     0744  120A  118A  2602  120A  118A  	fcall	_Lcd_Command
   568     0749                     l897:
   569                           
   570                           ;newmain.c: 80:     _delay((unsigned long)((100)*(6000000/4000.0)));
   571     0749  30C3               	movlw	195
   572     074A  00F4               	movwf	??_Lcd_Init+1
   573     074B  30CD               	movlw	205
   574     074C  00F3               	movwf	??_Lcd_Init
   575     074D                     u477:
   576     074D  0BF3               	decfsz	??_Lcd_Init,f
   577     074E  2F4D               	goto	u477
   578     074F  0BF4               	decfsz	??_Lcd_Init+1,f
   579     0750  2F4D               	goto	u477
   580     0751                     l899:
   581                           
   582                           ;newmain.c: 81:     Lcd_Command(0x38);
   583     0751  3038               	movlw	56
   584     0752  120A  118A  2602  120A  118A  	fcall	_Lcd_Command
   585     0757                     l901:
   586                           
   587                           ;newmain.c: 82:     _delay((unsigned long)((100)*(6000000/4000.0)));
   588     0757  30C3               	movlw	195
   589     0758  00F4               	movwf	??_Lcd_Init+1
   590     0759  30CD               	movlw	205
   591     075A  00F3               	movwf	??_Lcd_Init
   592     075B                     u487:
   593     075B  0BF3               	decfsz	??_Lcd_Init,f
   594     075C  2F5B               	goto	u487
   595     075D  0BF4               	decfsz	??_Lcd_Init+1,f
   596     075E  2F5B               	goto	u487
   597     075F                     l903:
   598                           
   599                           ;newmain.c: 83:     Lcd_Command(0x06);
   600     075F  3006               	movlw	6
   601     0760  120A  118A  2602  120A  118A  	fcall	_Lcd_Command
   602     0765                     l905:
   603                           
   604                           ;newmain.c: 84:     _delay((unsigned long)((100)*(6000000/4000.0)));
   605     0765  30C3               	movlw	195
   606     0766  00F4               	movwf	??_Lcd_Init+1
   607     0767  30CD               	movlw	205
   608     0768  00F3               	movwf	??_Lcd_Init
   609     0769                     u497:
   610     0769  0BF3               	decfsz	??_Lcd_Init,f
   611     076A  2F69               	goto	u497
   612     076B  0BF4               	decfsz	??_Lcd_Init+1,f
   613     076C  2F69               	goto	u497
   614     076D                     l907:
   615                           
   616                           ;newmain.c: 85:     Lcd_Command(0x0C);
   617     076D  300C               	movlw	12
   618     076E  120A  118A  2602  120A  118A  	fcall	_Lcd_Command
   619     0773                     l909:
   620                           
   621                           ;newmain.c: 86:     _delay((unsigned long)((100)*(6000000/4000.0)));
   622     0773  30C3               	movlw	195
   623     0774  00F4               	movwf	??_Lcd_Init+1
   624     0775  30CD               	movlw	205
   625     0776  00F3               	movwf	??_Lcd_Init
   626     0777                     u507:
   627     0777  0BF3               	decfsz	??_Lcd_Init,f
   628     0778  2F77               	goto	u507
   629     0779  0BF4               	decfsz	??_Lcd_Init+1,f
   630     077A  2F77               	goto	u507
   631     077B                     l911:
   632                           
   633                           ;newmain.c: 87:     Lcd_Command(0x01);
   634     077B  3001               	movlw	1
   635     077C  120A  118A  2602  120A  118A  	fcall	_Lcd_Command
   636     0781                     l913:
   637                           
   638                           ;newmain.c: 88:     _delay((unsigned long)((100)*(6000000/4000.0)));
   639     0781  30C3               	movlw	195
   640     0782  00F4               	movwf	??_Lcd_Init+1
   641     0783  30CD               	movlw	205
   642     0784  00F3               	movwf	??_Lcd_Init
   643     0785                     u517:
   644     0785  0BF3               	decfsz	??_Lcd_Init,f
   645     0786  2F85               	goto	u517
   646     0787  0BF4               	decfsz	??_Lcd_Init+1,f
   647     0788  2F85               	goto	u517
   648     0789                     l39:
   649     0789  0008               	return
   650     078A                     __end_of_Lcd_Init:
   651                           
   652                           	psect	text2
   653     0602                     __ptext2:	
   654 ;; *************** function _Lcd_Command *****************
   655 ;; Defined at:
   656 ;;		line 113 in file "newmain.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;  cmd             1    wreg     unsigned char 
   659 ;; Auto vars:     Size  Location     Type
   660 ;;  cmd             1    2[COMMON] unsigned char 
   661 ;; Return value:  Size  Location     Type
   662 ;;                  1    wreg      void 
   663 ;; Registers used:
   664 ;;		wreg, status,2, status,0
   665 ;; Tracked objects:
   666 ;;		On entry : 0/0
   667 ;;		On exit  : 0/0
   668 ;;		Unchanged: 0/0
   669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   670 ;;      Params:         0       0       0       0       0
   671 ;;      Locals:         1       0       0       0       0
   672 ;;      Temps:          2       0       0       0       0
   673 ;;      Totals:         3       0       0       0       0
   674 ;;Total ram usage:        3 bytes
   675 ;; Hardware stack levels used: 1
   676 ;; This function calls:
   677 ;;		Nothing
   678 ;; This function is called by:
   679 ;;		_main
   680 ;;		_Lcd_Init
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684     0602                     _Lcd_Command:	
   685                           ;psect for function _Lcd_Command
   686                           
   687                           
   688                           ;incstack = 0
   689                           ; Regs used in _Lcd_Command: [wreg+status,2+status,0]
   690                           ;Lcd_Command@cmd stored from wreg
   691     0602  00F2               	movwf	Lcd_Command@cmd
   692     0603                     l785:
   693                           
   694                           ;newmain.c: 114:     PORTC &= ~0x08;
   695     0603  30F7               	movlw	247
   696     0604  1283               	bcf	3,5	;RP0=0, select bank0
   697     0605  1303               	bcf	3,6	;RP1=0, select bank0
   698     0606  0587               	andwf	7,f	;volatile
   699     0607                     l787:
   700                           
   701                           ;newmain.c: 115:     PORTD = cmd;
   702     0607  0872               	movf	Lcd_Command@cmd,w
   703     0608  0088               	movwf	8	;volatile
   704     0609                     l789:
   705                           
   706                           ;newmain.c: 116:     PORTC |= 0x01;
   707     0609  1407               	bsf	7,0	;volatile
   708     060A                     l791:
   709                           
   710                           ;newmain.c: 117:     PORTC &= ~0x01;
   711     060A  30FE               	movlw	254
   712     060B  0587               	andwf	7,f	;volatile
   713                           
   714                           ;newmain.c: 118:     _delay((unsigned long)((100)*(6000000/4000.0)));
   715     060C  30C3               	movlw	195
   716     060D  00F1               	movwf	??_Lcd_Command+1
   717     060E  30CD               	movlw	205
   718     060F  00F0               	movwf	??_Lcd_Command
   719     0610                     u527:
   720     0610  0BF0               	decfsz	??_Lcd_Command,f
   721     0611  2E10               	goto	u527
   722     0612  0BF1               	decfsz	??_Lcd_Command+1,f
   723     0613  2E10               	goto	u527
   724     0614                     l52:
   725     0614  0008               	return
   726     0615                     __end_of_Lcd_Command:
   727                           
   728                           	psect	text3
   729     0615                     __ptext3:	
   730 ;; *************** function _LcdOutput *****************
   731 ;; Defined at:
   732 ;;		line 91 in file "newmain.c"
   733 ;; Parameters:    Size  Location     Type
   734 ;;  num             2    8[COMMON] int 
   735 ;; Auto vars:     Size  Location     Type
   736 ;;  digits          5    0[BANK0 ] unsigned char [5]
   737 ;;  i               1    5[BANK0 ] unsigned char 
   738 ;; Return value:  Size  Location     Type
   739 ;;                  1    wreg      void 
   740 ;; Registers used:
   741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   747 ;;      Params:         2       0       0       0       0
   748 ;;      Locals:         0       6       0       0       0
   749 ;;      Temps:          0       0       0       0       0
   750 ;;      Totals:         2       6       0       0       0
   751 ;;Total ram usage:        8 bytes
   752 ;; Hardware stack levels used: 1
   753 ;; Hardware stack levels required when called: 1
   754 ;; This function calls:
   755 ;;		_Lcd_Data
   756 ;;		___awdiv
   757 ;;		___awmod
   758 ;; This function is called by:
   759 ;;		_main
   760 ;; This function uses a non-reentrant model
   761 ;;
   762                           
   763     0615                     _LcdOutput:	
   764                           ;psect for function _LcdOutput
   765                           
   766     0615                     l915:	
   767                           ;incstack = 0
   768                           ; Regs used in _LcdOutput: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   769                           
   770                           
   771                           ;newmain.c: 92:     unsigned char digits[5];;newmain.c: 93:     unsigned char i = 0;
   772     0615  1283               	bcf	3,5	;RP0=0, select bank0
   773     0616  1303               	bcf	3,6	;RP1=0, select bank0
   774     0617  01A5               	clrf	LcdOutput@i
   775     0618                     l917:
   776                           
   777                           ;newmain.c: 95:     if (num == 0) {
   778     0618  0878               	movf	LcdOutput@num,w
   779     0619  0479               	iorwf	LcdOutput@num+1,w
   780     061A  1D03               	btfss	3,2
   781     061B  2E1D               	goto	u421
   782     061C  2E1E               	goto	u420
   783     061D                     u421:
   784     061D  2E4E               	goto	l929
   785     061E                     u420:
   786     061E                     l919:
   787                           
   788                           ;newmain.c: 96:         Lcd_Data('0');
   789     061E  3030               	movlw	48
   790     061F  120A  118A  25F0  120A  118A  	fcall	_Lcd_Data
   791     0624  2E68               	goto	l43
   792     0625                     l923:
   793                           
   794                           ;newmain.c: 101:         digits[i] = (num % 10) + '0';
   795     0625  0825               	movf	LcdOutput@i,w
   796     0626  3E20               	addlw	(low (LcdOutput@digits| 0))& (0+255)
   797     0627  0084               	movwf	4
   798     0628  300A               	movlw	10
   799     0629  00F0               	movwf	___awmod@divisor
   800     062A  3000               	movlw	0
   801     062B  00F1               	movwf	___awmod@divisor+1
   802     062C  0879               	movf	LcdOutput@num+1,w
   803     062D  00F3               	movwf	___awmod@dividend+1
   804     062E  0878               	movf	LcdOutput@num,w
   805     062F  00F2               	movwf	___awmod@dividend
   806     0630  120A  118A  2669  120A  118A  	fcall	___awmod
   807     0635  0870               	movf	?___awmod,w
   808     0636  3E30               	addlw	48
   809     0637  1383               	bcf	3,7	;select IRP bank0
   810     0638  0080               	movwf	0
   811     0639                     l925:
   812                           
   813                           ;newmain.c: 102:         num /= 10;
   814     0639  300A               	movlw	10
   815     063A  00F0               	movwf	___awdiv@divisor
   816     063B  3000               	movlw	0
   817     063C  00F1               	movwf	___awdiv@divisor+1
   818     063D  0879               	movf	LcdOutput@num+1,w
   819     063E  00F3               	movwf	___awdiv@dividend+1
   820     063F  0878               	movf	LcdOutput@num,w
   821     0640  00F2               	movwf	___awdiv@dividend
   822     0641  120A  118A  26C0  120A  118A  	fcall	___awdiv
   823     0646  0871               	movf	?___awdiv+1,w
   824     0647  00F9               	movwf	LcdOutput@num+1
   825     0648  0870               	movf	?___awdiv,w
   826     0649  00F8               	movwf	LcdOutput@num
   827     064A                     l927:
   828                           
   829                           ;newmain.c: 103:         i++;
   830     064A  3001               	movlw	1
   831     064B  1283               	bcf	3,5	;RP0=0, select bank0
   832     064C  1303               	bcf	3,6	;RP1=0, select bank0
   833     064D  07A5               	addwf	LcdOutput@i,f
   834     064E                     l929:
   835                           
   836                           ;newmain.c: 100:     while (num != 0) {
   837     064E  0878               	movf	LcdOutput@num,w
   838     064F  0479               	iorwf	LcdOutput@num+1,w
   839     0650  1D03               	btfss	3,2
   840     0651  2E53               	goto	u431
   841     0652  2E54               	goto	u430
   842     0653                     u431:
   843     0653  2E25               	goto	l923
   844     0654                     u430:
   845     0654  2E61               	goto	l935
   846     0655                     l931:
   847                           
   848                           ;newmain.c: 108:         i--;
   849     0655  3001               	movlw	1
   850     0656  02A5               	subwf	LcdOutput@i,f
   851     0657                     l933:
   852                           
   853                           ;newmain.c: 109:         Lcd_Data(digits[i]);
   854     0657  0825               	movf	LcdOutput@i,w
   855     0658  3E20               	addlw	(low (LcdOutput@digits| 0))& (0+255)
   856     0659  0084               	movwf	4
   857     065A  1383               	bcf	3,7	;select IRP bank0
   858     065B  0800               	movf	0,w
   859     065C  120A  118A  25F0  120A  118A  	fcall	_Lcd_Data
   860     0661                     l935:
   861                           
   862                           ;newmain.c: 107:     while (i > 0) {
   863     0661  1283               	bcf	3,5	;RP0=0, select bank0
   864     0662  1303               	bcf	3,6	;RP1=0, select bank0
   865     0663  0825               	movf	LcdOutput@i,w
   866     0664  1D03               	btfss	3,2
   867     0665  2E67               	goto	u441
   868     0666  2E68               	goto	u440
   869     0667                     u441:
   870     0667  2E55               	goto	l931
   871     0668                     u440:
   872     0668                     l43:
   873     0668  0008               	return
   874     0669                     __end_of_LcdOutput:
   875                           
   876                           	psect	text4
   877     0669                     __ptext4:	
   878 ;; *************** function ___awmod *****************
   879 ;; Defined at:
   880 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awmod.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;  divisor         2    0[COMMON] int 
   883 ;;  dividend        2    2[COMMON] int 
   884 ;; Auto vars:     Size  Location     Type
   885 ;;  sign            1    5[COMMON] unsigned char 
   886 ;;  counter         1    4[COMMON] unsigned char 
   887 ;; Return value:  Size  Location     Type
   888 ;;                  2    0[COMMON] int 
   889 ;; Registers used:
   890 ;;		wreg, status,2, status,0
   891 ;; Tracked objects:
   892 ;;		On entry : 0/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   896 ;;      Params:         4       0       0       0       0
   897 ;;      Locals:         2       0       0       0       0
   898 ;;      Temps:          0       0       0       0       0
   899 ;;      Totals:         6       0       0       0       0
   900 ;;Total ram usage:        6 bytes
   901 ;; Hardware stack levels used: 1
   902 ;; This function calls:
   903 ;;		Nothing
   904 ;; This function is called by:
   905 ;;		_LcdOutput
   906 ;; This function uses a non-reentrant model
   907 ;;
   908                           
   909     0669                     ___awmod:	
   910                           ;psect for function ___awmod
   911                           
   912     0669                     l847:	
   913                           ;incstack = 0
   914                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   915                           
   916     0669  01F5               	clrf	___awmod@sign
   917     066A                     l849:
   918     066A  1FF3               	btfss	___awmod@dividend+1,7
   919     066B  2E6D               	goto	u331
   920     066C  2E6E               	goto	u330
   921     066D                     u331:
   922     066D  2E75               	goto	l855
   923     066E                     u330:
   924     066E                     l851:
   925     066E  09F2               	comf	___awmod@dividend,f
   926     066F  09F3               	comf	___awmod@dividend+1,f
   927     0670  0AF2               	incf	___awmod@dividend,f
   928     0671  1903               	skipnz
   929     0672  0AF3               	incf	___awmod@dividend+1,f
   930     0673                     l853:
   931     0673  3001               	movlw	1
   932     0674  00F5               	movwf	___awmod@sign
   933     0675                     l855:
   934     0675  1FF1               	btfss	___awmod@divisor+1,7
   935     0676  2E78               	goto	u341
   936     0677  2E79               	goto	u340
   937     0678                     u341:
   938     0678  2E7E               	goto	l859
   939     0679                     u340:
   940     0679                     l857:
   941     0679  09F0               	comf	___awmod@divisor,f
   942     067A  09F1               	comf	___awmod@divisor+1,f
   943     067B  0AF0               	incf	___awmod@divisor,f
   944     067C  1903               	skipnz
   945     067D  0AF1               	incf	___awmod@divisor+1,f
   946     067E                     l859:
   947     067E  0870               	movf	___awmod@divisor,w
   948     067F  0471               	iorwf	___awmod@divisor+1,w
   949     0680  1903               	btfsc	3,2
   950     0681  2E83               	goto	u351
   951     0682  2E84               	goto	u350
   952     0683                     u351:
   953     0683  2EB1               	goto	l877
   954     0684                     u350:
   955     0684                     l861:
   956     0684  3001               	movlw	1
   957     0685  00F4               	movwf	___awmod@counter
   958     0686  2E90               	goto	l867
   959     0687                     l863:
   960     0687  3001               	movlw	1
   961     0688                     u365:
   962     0688  1003               	clrc
   963     0689  0DF0               	rlf	___awmod@divisor,f
   964     068A  0DF1               	rlf	___awmod@divisor+1,f
   965     068B  3EFF               	addlw	-1
   966     068C  1D03               	skipz
   967     068D  2E88               	goto	u365
   968     068E                     l865:
   969     068E  3001               	movlw	1
   970     068F  07F4               	addwf	___awmod@counter,f
   971     0690                     l867:
   972     0690  1FF1               	btfss	___awmod@divisor+1,7
   973     0691  2E93               	goto	u371
   974     0692  2E94               	goto	u370
   975     0693                     u371:
   976     0693  2E87               	goto	l863
   977     0694                     u370:
   978     0694                     l869:
   979     0694  0871               	movf	___awmod@divisor+1,w
   980     0695  0273               	subwf	___awmod@dividend+1,w
   981     0696  1D03               	skipz
   982     0697  2E9A               	goto	u385
   983     0698  0870               	movf	___awmod@divisor,w
   984     0699  0272               	subwf	___awmod@dividend,w
   985     069A                     u385:
   986     069A  1C03               	skipc
   987     069B  2E9D               	goto	u381
   988     069C  2E9E               	goto	u380
   989     069D                     u381:
   990     069D  2EA4               	goto	l873
   991     069E                     u380:
   992     069E                     l871:
   993     069E  0870               	movf	___awmod@divisor,w
   994     069F  02F2               	subwf	___awmod@dividend,f
   995     06A0  0871               	movf	___awmod@divisor+1,w
   996     06A1  1C03               	skipc
   997     06A2  03F3               	decf	___awmod@dividend+1,f
   998     06A3  02F3               	subwf	___awmod@dividend+1,f
   999     06A4                     l873:
  1000     06A4  3001               	movlw	1
  1001     06A5                     u395:
  1002     06A5  1003               	clrc
  1003     06A6  0CF1               	rrf	___awmod@divisor+1,f
  1004     06A7  0CF0               	rrf	___awmod@divisor,f
  1005     06A8  3EFF               	addlw	-1
  1006     06A9  1D03               	skipz
  1007     06AA  2EA5               	goto	u395
  1008     06AB                     l875:
  1009     06AB  3001               	movlw	1
  1010     06AC  02F4               	subwf	___awmod@counter,f
  1011     06AD  1D03               	btfss	3,2
  1012     06AE  2EB0               	goto	u401
  1013     06AF  2EB1               	goto	u400
  1014     06B0                     u401:
  1015     06B0  2E94               	goto	l869
  1016     06B1                     u400:
  1017     06B1                     l877:
  1018     06B1  0875               	movf	___awmod@sign,w
  1019     06B2  1903               	btfsc	3,2
  1020     06B3  2EB5               	goto	u411
  1021     06B4  2EB6               	goto	u410
  1022     06B5                     u411:
  1023     06B5  2EBB               	goto	l881
  1024     06B6                     u410:
  1025     06B6                     l879:
  1026     06B6  09F2               	comf	___awmod@dividend,f
  1027     06B7  09F3               	comf	___awmod@dividend+1,f
  1028     06B8  0AF2               	incf	___awmod@dividend,f
  1029     06B9  1903               	skipnz
  1030     06BA  0AF3               	incf	___awmod@dividend+1,f
  1031     06BB                     l881:
  1032     06BB  0873               	movf	___awmod@dividend+1,w
  1033     06BC  00F1               	movwf	?___awmod+1
  1034     06BD  0872               	movf	___awmod@dividend,w
  1035     06BE  00F0               	movwf	?___awmod
  1036     06BF                     l307:
  1037     06BF  0008               	return
  1038     06C0                     __end_of___awmod:
  1039                           
  1040                           	psect	text5
  1041     06C0                     __ptext5:	
  1042 ;; *************** function ___awdiv *****************
  1043 ;; Defined at:
  1044 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awdiv.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;  divisor         2    0[COMMON] int 
  1047 ;;  dividend        2    2[COMMON] int 
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;  quotient        2    6[COMMON] int 
  1050 ;;  sign            1    5[COMMON] unsigned char 
  1051 ;;  counter         1    4[COMMON] unsigned char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  2    0[COMMON] int 
  1054 ;; Registers used:
  1055 ;;		wreg, status,2, status,0
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1061 ;;      Params:         4       0       0       0       0
  1062 ;;      Locals:         4       0       0       0       0
  1063 ;;      Temps:          0       0       0       0       0
  1064 ;;      Totals:         8       0       0       0       0
  1065 ;;Total ram usage:        8 bytes
  1066 ;; Hardware stack levels used: 1
  1067 ;; This function calls:
  1068 ;;		Nothing
  1069 ;; This function is called by:
  1070 ;;		_LcdOutput
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074     06C0                     ___awdiv:	
  1075                           ;psect for function ___awdiv
  1076                           
  1077     06C0                     l803:	
  1078                           ;incstack = 0
  1079                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1080                           
  1081     06C0  01F5               	clrf	___awdiv@sign
  1082     06C1                     l805:
  1083     06C1  1FF1               	btfss	___awdiv@divisor+1,7
  1084     06C2  2EC4               	goto	u231
  1085     06C3  2EC5               	goto	u230
  1086     06C4                     u231:
  1087     06C4  2ECC               	goto	l811
  1088     06C5                     u230:
  1089     06C5                     l807:
  1090     06C5  09F0               	comf	___awdiv@divisor,f
  1091     06C6  09F1               	comf	___awdiv@divisor+1,f
  1092     06C7  0AF0               	incf	___awdiv@divisor,f
  1093     06C8  1903               	skipnz
  1094     06C9  0AF1               	incf	___awdiv@divisor+1,f
  1095     06CA                     l809:
  1096     06CA  3001               	movlw	1
  1097     06CB  00F5               	movwf	___awdiv@sign
  1098     06CC                     l811:
  1099     06CC  1FF3               	btfss	___awdiv@dividend+1,7
  1100     06CD  2ECF               	goto	u241
  1101     06CE  2ED0               	goto	u240
  1102     06CF                     u241:
  1103     06CF  2ED7               	goto	l817
  1104     06D0                     u240:
  1105     06D0                     l813:
  1106     06D0  09F2               	comf	___awdiv@dividend,f
  1107     06D1  09F3               	comf	___awdiv@dividend+1,f
  1108     06D2  0AF2               	incf	___awdiv@dividend,f
  1109     06D3  1903               	skipnz
  1110     06D4  0AF3               	incf	___awdiv@dividend+1,f
  1111     06D5                     l815:
  1112     06D5  3001               	movlw	1
  1113     06D6  06F5               	xorwf	___awdiv@sign,f
  1114     06D7                     l817:
  1115     06D7  01F6               	clrf	___awdiv@quotient
  1116     06D8  01F7               	clrf	___awdiv@quotient+1
  1117     06D9                     l819:
  1118     06D9  0870               	movf	___awdiv@divisor,w
  1119     06DA  0471               	iorwf	___awdiv@divisor+1,w
  1120     06DB  1903               	btfsc	3,2
  1121     06DC  2EDE               	goto	u251
  1122     06DD  2EDF               	goto	u250
  1123     06DE                     u251:
  1124     06DE  2F14               	goto	l839
  1125     06DF                     u250:
  1126     06DF                     l821:
  1127     06DF  3001               	movlw	1
  1128     06E0  00F4               	movwf	___awdiv@counter
  1129     06E1  2EEB               	goto	l827
  1130     06E2                     l823:
  1131     06E2  3001               	movlw	1
  1132     06E3                     u265:
  1133     06E3  1003               	clrc
  1134     06E4  0DF0               	rlf	___awdiv@divisor,f
  1135     06E5  0DF1               	rlf	___awdiv@divisor+1,f
  1136     06E6  3EFF               	addlw	-1
  1137     06E7  1D03               	skipz
  1138     06E8  2EE3               	goto	u265
  1139     06E9                     l825:
  1140     06E9  3001               	movlw	1
  1141     06EA  07F4               	addwf	___awdiv@counter,f
  1142     06EB                     l827:
  1143     06EB  1FF1               	btfss	___awdiv@divisor+1,7
  1144     06EC  2EEE               	goto	u271
  1145     06ED  2EEF               	goto	u270
  1146     06EE                     u271:
  1147     06EE  2EE2               	goto	l823
  1148     06EF                     u270:
  1149     06EF                     l829:
  1150     06EF  3001               	movlw	1
  1151     06F0                     u285:
  1152     06F0  1003               	clrc
  1153     06F1  0DF6               	rlf	___awdiv@quotient,f
  1154     06F2  0DF7               	rlf	___awdiv@quotient+1,f
  1155     06F3  3EFF               	addlw	-1
  1156     06F4  1D03               	skipz
  1157     06F5  2EF0               	goto	u285
  1158     06F6  0871               	movf	___awdiv@divisor+1,w
  1159     06F7  0273               	subwf	___awdiv@dividend+1,w
  1160     06F8  1D03               	skipz
  1161     06F9  2EFC               	goto	u295
  1162     06FA  0870               	movf	___awdiv@divisor,w
  1163     06FB  0272               	subwf	___awdiv@dividend,w
  1164     06FC                     u295:
  1165     06FC  1C03               	skipc
  1166     06FD  2EFF               	goto	u291
  1167     06FE  2F00               	goto	u290
  1168     06FF                     u291:
  1169     06FF  2F07               	goto	l835
  1170     0700                     u290:
  1171     0700                     l831:
  1172     0700  0870               	movf	___awdiv@divisor,w
  1173     0701  02F2               	subwf	___awdiv@dividend,f
  1174     0702  0871               	movf	___awdiv@divisor+1,w
  1175     0703  1C03               	skipc
  1176     0704  03F3               	decf	___awdiv@dividend+1,f
  1177     0705  02F3               	subwf	___awdiv@dividend+1,f
  1178     0706                     l833:
  1179     0706  1476               	bsf	___awdiv@quotient,0
  1180     0707                     l835:
  1181     0707  3001               	movlw	1
  1182     0708                     u305:
  1183     0708  1003               	clrc
  1184     0709  0CF1               	rrf	___awdiv@divisor+1,f
  1185     070A  0CF0               	rrf	___awdiv@divisor,f
  1186     070B  3EFF               	addlw	-1
  1187     070C  1D03               	skipz
  1188     070D  2F08               	goto	u305
  1189     070E                     l837:
  1190     070E  3001               	movlw	1
  1191     070F  02F4               	subwf	___awdiv@counter,f
  1192     0710  1D03               	btfss	3,2
  1193     0711  2F13               	goto	u311
  1194     0712  2F14               	goto	u310
  1195     0713                     u311:
  1196     0713  2EEF               	goto	l829
  1197     0714                     u310:
  1198     0714                     l839:
  1199     0714  0875               	movf	___awdiv@sign,w
  1200     0715  1903               	btfsc	3,2
  1201     0716  2F18               	goto	u321
  1202     0717  2F19               	goto	u320
  1203     0718                     u321:
  1204     0718  2F1E               	goto	l843
  1205     0719                     u320:
  1206     0719                     l841:
  1207     0719  09F6               	comf	___awdiv@quotient,f
  1208     071A  09F7               	comf	___awdiv@quotient+1,f
  1209     071B  0AF6               	incf	___awdiv@quotient,f
  1210     071C  1903               	skipnz
  1211     071D  0AF7               	incf	___awdiv@quotient+1,f
  1212     071E                     l843:
  1213     071E  0877               	movf	___awdiv@quotient+1,w
  1214     071F  00F1               	movwf	?___awdiv+1
  1215     0720  0876               	movf	___awdiv@quotient,w
  1216     0721  00F0               	movwf	?___awdiv
  1217     0722                     l294:
  1218     0722  0008               	return
  1219     0723                     __end_of___awdiv:
  1220                           
  1221                           	psect	text6
  1222     05F0                     __ptext6:	
  1223 ;; *************** function _Lcd_Data *****************
  1224 ;; Defined at:
  1225 ;;		line 121 in file "newmain.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;  data            1    wreg     unsigned char 
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;  data            1    2[COMMON] unsigned char 
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  1    wreg      void 
  1232 ;; Registers used:
  1233 ;;		wreg, status,2, status,0
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1239 ;;      Params:         0       0       0       0       0
  1240 ;;      Locals:         1       0       0       0       0
  1241 ;;      Temps:          2       0       0       0       0
  1242 ;;      Totals:         3       0       0       0       0
  1243 ;;Total ram usage:        3 bytes
  1244 ;; Hardware stack levels used: 1
  1245 ;; This function calls:
  1246 ;;		Nothing
  1247 ;; This function is called by:
  1248 ;;		_main
  1249 ;;		_LcdOutput
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253     05F0                     _Lcd_Data:	
  1254                           ;psect for function _Lcd_Data
  1255                           
  1256                           
  1257                           ;incstack = 0
  1258                           ; Regs used in _Lcd_Data: [wreg+status,2+status,0]
  1259                           ;Lcd_Data@data stored from wreg
  1260     05F0  00F2               	movwf	Lcd_Data@data
  1261     05F1                     l793:
  1262                           
  1263                           ;newmain.c: 122:     PORTC |= 0x08;
  1264     05F1  1283               	bcf	3,5	;RP0=0, select bank0
  1265     05F2  1303               	bcf	3,6	;RP1=0, select bank0
  1266     05F3  1587               	bsf	7,3	;volatile
  1267     05F4                     l795:
  1268                           
  1269                           ;newmain.c: 123:     PORTD = data;
  1270     05F4  0872               	movf	Lcd_Data@data,w
  1271     05F5  0088               	movwf	8	;volatile
  1272     05F6                     l797:
  1273                           
  1274                           ;newmain.c: 124:     PORTC |= 0x01;
  1275     05F6  1407               	bsf	7,0	;volatile
  1276     05F7                     l799:
  1277                           
  1278                           ;newmain.c: 125:     PORTC &= ~0x01;
  1279     05F7  30FE               	movlw	254
  1280     05F8  0587               	andwf	7,f	;volatile
  1281     05F9                     l801:
  1282                           
  1283                           ;newmain.c: 126:     _delay((unsigned long)((100)*(6000000/4000.0)));
  1284     05F9  30C3               	movlw	195
  1285     05FA  00F1               	movwf	??_Lcd_Data+1
  1286     05FB  30CD               	movlw	205
  1287     05FC  00F0               	movwf	??_Lcd_Data
  1288     05FD                     u537:
  1289     05FD  0BF0               	decfsz	??_Lcd_Data,f
  1290     05FE  2DFD               	goto	u537
  1291     05FF  0BF1               	decfsz	??_Lcd_Data+1,f
  1292     0600  2DFD               	goto	u537
  1293     0601                     l55:
  1294     0601  0008               	return
  1295     0602                     __end_of_Lcd_Data:
  1296     0002                     ___latbits      equ	2
  1297     007E                     btemp           set	126	;btemp
  1298     007E                     wtemp0          set	126
  1299                           
  1300                           	psect	config
  1301                           
  1302                           ;Config register CONFIG @ 0x2007
  1303                           ;	Oscillator Selection bits
  1304                           ;	FOSC = EXTRC, RC oscillator
  1305                           ;	Watchdog Timer Enable bit
  1306                           ;	WDTE = OFF, WDT disabled
  1307                           ;	Power-up Timer Enable bit
  1308                           ;	PWRTE = OFF, PWRT disabled
  1309                           ;	Brown-out Reset Enable bit
  1310                           ;	BOREN = OFF, BOR disabled
  1311                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1312                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1313                           ;	Data EEPROM Memory Code Protection bit
  1314                           ;	CPD = OFF, Data EEPROM code protection off
  1315                           ;	Flash Program Memory Write Enable bits
  1316                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1317                           ;	In-Circuit Debugger Mode bit
  1318                           ;	DEBUG = 0x1, unprogrammed default
  1319                           ;	Flash Program Memory Code Protection bit
  1320                           ;	CP = OFF, Code protection off
  1321     2007                     	org	8199
  1322     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      13
    BANK0            80      6      10
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_LcdOutput
    _Lcd_Init->_Lcd_Command
    _LcdOutput->___awdiv

Critical Paths under _main in BANK0

    _main->_LcdOutput

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     924
                          _LcdOutput
                        _Lcd_Command
                           _Lcd_Data
                           _Lcd_Init
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      29
                                              3 COMMON     2     2      0
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (2) _Lcd_Command                                          3     3      0      29
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LcdOutput                                            8     6      2     837
                                              8 COMMON     2     0      2
                                              0 BANK0      6     6      0
                           _Lcd_Data
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     298
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     302
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Data                                             3     3      0      29
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcdOutput
     _Lcd_Data
     ___awdiv
     ___awmod
   _Lcd_Command
   _Lcd_Data
   _Lcd_Init
     _Lcd_Command

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     10      13     92.9%
BANK0               80      6      10     12.5%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      23      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Sat Mar 22 09:45:23 2025

                     l33 07EF                       l34 07EF                       l43 0668  
                     l52 0614                       l55 0601                       l39 0789  
           ___awdiv@sign 0075                      l307 06BF                      l294 0722  
                    l801 05F9                      l811 06CC                      l803 06C0  
                    l821 06DF                      l813 06D0                      l805 06C1  
                    l901 0757                      l831 0700                      l823 06E2  
                    l815 06D5                      l807 06C5                      l911 077B  
                    l903 075F                      l841 0719                      l833 0706  
                    l825 06E9                      l817 06D7                      l809 06CA  
                    l913 0781                      l905 0765                      l843 071E  
                    l835 0707                      l827 06EB                      l819 06D9  
                    l851 066E                      l931 0655                      l923 0625  
                    l915 0615                      l907 076D                      l837 070E  
                    l829 06EF                      l861 0684                      l853 0673  
                    l933 0657                      l925 0639                      l917 0618  
                    l909 0773                      l941 0795                      l839 0714  
                    l871 069E                      l863 0687                      l855 0675  
                    l847 0669                      l935 0661                      l927 064A  
                    l919 061E                      l791 060A                      l951 07B6  
                    l943 0799                      l793 05F1                      l881 06BB  
                    l873 06A4                      l865 068E                      l857 0679  
                    l849 066A                      l929 064E                      l785 0603  
                    l961 07DB                      l953 07C5                      l945 07A1  
                    l937 078A                      l795 05F4                      l875 06AB  
                    l867 0690                      l859 067E                      l787 0607  
                    l891 0735                      l963 07DB                      l955 07CB  
                    l947 07AA                      l939 078F                      l797 05F6  
                    l869 0694                      l877 06B1                      l789 0609  
                    l893 073B                      l885 0723                      l965 07E1  
                    l957 07D1                      l949 07B0                      l799 05F7  
                    l879 06B6                      l895 0743                      l887 0727  
                    l959 07D5                      l897 0749                      l889 072D  
                    l969 07E6                      l899 0751                      u310 0714  
                    u230 06C5                      u311 0713                      u231 06C4  
                    u320 0719                      u240 06D0                      u400 06B1  
                    u321 0718                      u305 0708                      u241 06CF  
                    u401 06B0                      u250 06DF                      u410 06B6  
                    u330 066E                      u251 06DE                      u411 06B5  
                    u331 066D                      u340 0679                      u420 061E  
                    u341 0678                      u421 061D                      u270 06EF  
                    u350 0684                      u430 0654                      u271 06EE  
                    u351 0683                      u431 0653                      u440 0668  
                    u265 06E3                      u441 0667                      u290 0700  
                    u370 0694                      u291 06FF                      u371 0693  
                    u507 0777                      u380 069E                      u285 06F0  
                    u381 069D                      u365 0688                      u517 0785  
                    u295 06FC                      u527 0610                      u537 05FD  
                    u385 069A                      u457 0731                      u395 06A5  
                    u467 073F                      u477 074D                      u487 075B  
                    u497 0769                      _sub 007A                      fsr0 0004  
                    indf 0000             ___awmod@sign 0075      __end_of_Lcd_Command 0615  
                   _main 078A                     _num1 0028                     _num2 0026  
                   btemp 007E                     start 0000                    ?_main 0070  
        __end_of___awdiv 0723          __end_of___awmod 06C0          ___awdiv@divisor 0070  
        ___awdiv@counter 0074                    _PORTC 0007                    _PORTD 0008  
                  _TRISC 0087                    _TRISD 0088                    _Equal 007C  
                  status 0003                    wtemp0 007E         __end_of_Lcd_Data 0602  
       __end_of_Lcd_Init 078A          __initialization 07F3             __end_of_main 07F3  
            _Lcd_Command 0602                   ??_main 007A         ___awdiv@dividend 0072  
              ??___awdiv 0074                ??___awmod 0074         ___awdiv@quotient 0076  
        ___awmod@divisor 0070          ___awmod@counter 0074  __end_of__initialization 07FC  
      __end_of_LcdOutput 0669           __pcstackCOMMON 0070                ?_Lcd_Data 0070  
              ?_Lcd_Init 0070               __pbssBANK0 0026               __pmaintext 078A  
             ??_Lcd_Data 0070               ??_Lcd_Init 0073                  ___awdiv 06C0  
                ___awmod 0669             ?_Lcd_Command 0070                  __ptext1 0723  
                __ptext2 0602                  __ptext3 0615                  __ptext4 0669  
                __ptext5 06C0                  __ptext6 05F0         ___awmod@dividend 0072  
   end_of_initialization 07FC                _LcdOutput 0615      start_initialization 07F3  
             ?_LcdOutput 0078              __pbssCOMMON 007A                ___latbits 0002  
          __pcstackBANK0 0020          LcdOutput@digits 0020                 ?___awdiv 0070  
               ?___awmod 0070             Lcd_Data@data 0072              ??_LcdOutput 007A  
               _Lcd_Data 05F0                 _Lcd_Init 0723             LcdOutput@num 0078  
          ??_Lcd_Command 0070           Lcd_Command@cmd 0072               LcdOutput@i 0025  
